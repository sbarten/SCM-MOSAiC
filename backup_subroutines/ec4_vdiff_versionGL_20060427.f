      SUBROUTINE EC4_VDIFF ( KIDIA,KFDIA,KLON,KLP2,KTDIA,KLEV,KLEVM1
     *                 , KLEVP1
     *                 , CONACC
     *                 , APZERO
     *                 , NSTEP,NSTART,NSTOP,TWODT,EPS
     *                 , LVDIFF,LSURF
C-----------------------------------------------------------------------
C - INPUT 2D .
     *       , PACLCM,   PAPHM1,   PAPM1,   PGEOM1,  PQM1,    PTKEM
     *       , PTKEM1M,  PTM1,     PUM1,    PVM1,    PXM1,    PTVM1
C - INPUT 1D .
     *       , LALAND
     *       , PAHFLM,   PAHFSM,   PAZ0M,   PDEW2M,  PEVAPM,  PFORESTM
     *       , PSEAICE,  PSNM1M,   PSRFL,   PTEMP2M, PTSM1M,  PT2MAXM
     *       , PT2MINM,  PUSTAR3M, PUSTRM,  PU10M,   PVDISM,  PVSTRM
     *       , PV10M,    PWIMAXM,  PWIND10M,PWLM1M,  PWSM1M
     *       , PWSMXM,   PVLTM
     *       , PBLHM,    PTKEVIM
     *       , PTSM,     PWSM
C - INPUT 1D LAM SPECIFIC
     *       , PSINLAT
C - OUTPUT 2D .
     *       , PTKE,     PTKEM1,   DTKEDT
     *       , PKE
C - OUTPUT 1D .
     *       , PAHFL,    PAHFS,    PAZ0,    PCVGHL,  PCVS,    PCVW
     *       , PDEW2,    PDHFQS,   PDHFQW,  PDHFT,   PEVAP
     *       , PQHFL,    PRSFL,    PTEMP2,  PTHFL,   PT2MAX,  PT2MIN
     *       , PUSTAR3,  PUSTR,    PU10,    PVDIS,   PVSTR,   PV10
     *       , PWIMAX,   PWLMX,    PWIND10, PXHFL
     *       , PBLH,     PTKEVI
C - INPUT/OUTPUT 2D .
     *       , PVOL,     PVOM,     PQTE,     PTTE,     PXTE
C - INPUT/OUTPUT 1D .
     *       , PVGRAT
CGEERT
     *       , PMFU, PLPARCEL )
  
!
!     PURPOSE * VDIFF * - DOES THE VERTICAL EXCHANGE OF U,V,T, Q, X BY TURBULENCE.
!

!     THIS ROUTINE COMPUTES THE PHYSICAL TENDENCIES OF THE FOUR
!     PROGNOSTIC VARIABLES U,V,T AND Q AND X DUE TO THE VERTICAL EXCHANGE BY
!     TURBULENT (= NON-MOIST CONVECTIVE) PROCESSES. THESE TENDENCIES ARE
!     OBTAINED AS THE DIFFERENCE BETWEEN THE RESULT OF AN IMPLICIT
!     TIME-STEP STARTING FROM VALUES AT T-1 AND THESE T-1 VALUES. ALL
!     THE DIAGNOSTIC COMPUTATIONS (EXCHANGE COEFFICIENTS, ...) ARE DONE
!     FROM THE T-1 VALUES. AS A BY-PRODUCT THE ROUGHNESS LENGTH OVER SEA
!     IS UPDATED ACCORDINGLY TO THE *CHARNOCK FORMULA. HEAT AND MOISTURE
!     SURFACE FLUXES AND THEIR DERIVATIVES AGAINST TS, WS AND WL
!     (THE LATTER WILL BE LATER WEIGHTED WITH THE SNOW FACTOR IN
!     *VDIFF*), LATER TO BE USED FOR SOIL PROCESSES TREATMENT, ARE ALSO
!     COMPUTED AS WELL AS A STABILITY VALUE TO BE USED AS A DIAGNOSTIC
!     OF THE DEPTH OF THE WELL MIXED LAYER IN CONVECTIVE COMPUTATIONS.
!


!     INTERFACE. *VDIFF* IS CALLED FROM *PHYSC*.

!
!     INPUT ARGUMENTS.
!
C
C     - 3D
C     PXTM1    : TRACER VARIABLES (T-DT)
C     - 2D
C     PACLCM   : CLOUD COVER (OLD VALUE)
C     PAPHM1   : HALF LEVEL PRESSURE (T-DT)
C     PAPM1    : FULL LEVEL PRESSURE (T-DT)
C     PGEOM1   : GEOPOTENTIAL ABOVE SURFACE (T-DT)
C     PQM1     : HUMIDITY (T-DT)
C     PTKEM    : TURBULENT KINETIC ENERGY
C     PTKEM1M  : TURBULENT KINETIC ENERGY (T-DT)
C     PTM1     : TEMPERATURE (T-DT)
C     PUM1     : ZONAL WIND (T-DT)
C     PVM1     : MERIDIONAL WIND (T-DT)
C     PXM1     : CLOUD WATER (T-DT)
C     PTVM1    : VIRTUAL TEMPERATURE (T-DT)
C     - 1D
C     LALAND   : LAND-SEA FLAG
C     PAHFLM   : SURFACE LATENT HEAT FLUX (OLD VALUE)
C     PAHFSM   : SURFACE SENSIBLE HEAT FLUX (OLD VALUE)
C     PAZ0M    : ROUGHNESS LENGTH (OLD VALUE)
C     PDEW2M   : DEW POINT TEMPERATURE AT 2 METER (ACCUMULATED, OLD VALUE)
C     PEVAPM   : SURFACE EVAPORATION (ACCUMULATED, OLD VALUE)
C     PEFORESTM: FOREST COVERAGE
C     PSEAICE  : SEA ICE COVER (NEW VALUE)
C     PSNM1M   : SNOW DEPTH (T-DT)
C     PSRFL    : NET SOLAR RADIATIVE FLUX AT THE SURFACE
C     PTEMP2M  : TEMPERATURE AT 2 METER (ACCUMULATED, OLD VALUE)
C     PTSM1M   : SURFACE TEMPERATURE (T-DT)
C     PT2MAXM  : MAXIMUM TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (OLD VALUE)
C     PT2MINM  : MINIMUN TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (OLD VALUE)
C     PUSTAR3M : TKE FOR OCEAN MIXED LAYER (ACCUMULATED, OLD VALUE)
C     PUSTRM   : U-STRESS (ACCUMULATED, OLD VALUE)
C     PVSTRM   : V-STRESS (ACCUMULATED, OLD VALUE)
C     PU10M    : U-WIND AT 10 METER (ACCUMULATED, OLD VALUE)
C     PV10M    : V-WIND AT 10 METER (ACCUMULATED, OLD VALUE)
C     PWIND10M : WIND SPEED AT 10 METER (ACCUMULATED, OLD VALUE)
C     PWIMAXM  : MAXIMUM WINDSPEED AT 10 M. BETW. OUTP. INTERV. (OLD VALUE)
C     PVDISM   : BOUNDARY LAYER DISSIPATION (ACCUMULATED, OLD VALUE)
C     PWLM1M   : SKIN RESERVOIR CONTENT (T-DT)
C     PWSM1M   : SURFACE SOIL WETNESS (T-DT)
C     PWSMXM   : FIELD CAPACITY OF SOIL
C     PVLTM    : LEAF AREA INDEX
C     PBLHM    : PLANETARY BOUNDARY LAYER HEIGHT (HOLTSLAG ET AL.)
CEVM
C     PTSM     : SURFACE TEMPERATURE
C     PWSM     : SURFACE SOIL WETNESS

!
!     OUTPUT ARGUMENTS.
!
!
C     - 2D
C     PTKE     : TURBULENT KINETIC ENERGY (T+DT)
C     PTKEM1   : TURBULENT KINETIC ENERGY (FILTERED)
C     DTKEDT   : TKE-TENDENCY
C     PKE      : KINETIC ENERGY LOSS FOR EACH LAYER
C     - 1D
C     KTROPO   : TROPOPAUSE INDEX
C     PAHFL    : SURFACE LATENT HEAT FLUX (NEW VALUE)
C     PAHFS    : SURFACE SENSIBLE HEAT FLUX (NEW VALUE)
C     PAZ0     : ROUGHNESS LENGTH (NEW VALUE)
C     PCVGHL   : RATIO OF MOISTURE FLUXES
C     PCVS     : SNOW COVER FRACTION
C     PCVW     : WET SKIN FRACTION
C     PDEW2    : DEW POINT TEMPERATURE AT 2 METER (ACCUMULATED, NEW VALUE)
C     PDHFQS   : DERIVITAVE OF MOISTURE FLUX OVER SNOW WITH RESP. TO SNOW D
C     PDHFQW   : DERIVITAVE OF MOISTURE FLUX WITH RESPECT TO SKIN RESERVOIR
C     PDHFT    : DERIVITAVE OF SENSIBLE HEAT FLUX WITH RESP. TO SURF. TEMP.
C     PEVAP    : SURFACE EVAPORATION (ACCUMULATED, NEW VALUE)
C     PQHFL    : MOISTURE FLUX AT THE SURFACE
C     PRSFL    : LARGE SCALE RAIN FLUX AT THE SURFACE
CGEERT 
C     PTHFL    : TOTAL !!!! HEAT FLUX AT THE SURFACE
C     PXHFL    : LIQUID WATER FLUX AT THE SURFACE
C     PBLH     : PLANETARY BOUNDARY LAYER HEIGHT (HOLTSLAG ET AL.)
C     PTEMP2   : TEMPERATURE AT 2 METER (ACCUMULATED, NEW VALUE)
C     PT2MAX   : MAXIMUM TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (NEW VALUE)
C     PT2MIN   : MINIMUN TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (NEW VALUE)
C     PUSTAR3  : TKE FOR OCEAN MIXED LAYER (ACCUMULATED, NEW VALUE)
C     PUSTR    : U-STRESS (ACCUMULATED, NEW VALUE)
C     PVSTR    : V-STRESS (ACCUMULATED, NEW VALUE)
C     PU10     : U-WIND AT 10 METER (ACCUMULATED, NEW VALUE)
C     PV10     : V-WIND AT 10 METER (ACCUMULATED, NEW VALUE)
C     PVDIS    : BOUNDARY LAYER DISSIPATION (ACCUMULATED, NEW VALUE)
C     PWIMAX   : MAXIMUM WINDSPEED AT 10 M. BETW. OUTP. INTERV. (NEW VALUE)
C     PWLMX    : MAXIMUM SKIN RESERVOIR CONTNET
C     PWIND10  : WIND SPEED AT 10 METER (ACCUMULATED, NEW VALUE)

!
!     INPUT/OUTPUT ARGUMENTS.
!    

C     - 3D
C     PXTTE    : TENDENCIES OF TRACER VARIABLES
C     - 2D
C     PVOL     : TENDENCY OF MERIDIONAL WIND
C     PVOM     : TENDENCY OF ZONAL WIND
C     PQTE     : TENDENCY OF HUMIDITY
C     PTTE     : TENDENCY OF TEMPERATURE
C     PXTE     : TENDENCY OF CLOUD WATER
C     - 1D
C     PVGRAT   : VEGETATION RATIO


!
!     METHOD.
!     
 
C          FIRST AN AUXIALIARY VARIABLE CP(Q)T+GZ IS CREATED ON WHICH
C     THE VERTICAL DIFFUSION PROCESS WILL WORK LIKE ON U,V AND Q. THEN
C     ALONG THE VERTICAL AND AT THE SURFACE, EXCHANGE COEFFICIENTS (WITH
C     THE DIMENSION OF A PRESSURE THICKNESS) ARE COMPUTED FOR MOMENTUM
C     AND FOR HEAT (SENSIBLE PLUS LATENT). THE LETTERS M AND H ARE USED
C     TO DISTINGUISH THEM. THE DIFFUSIONCOEFFICENTS DEPEND ON THE
C     TURBULENT KINETIC ENERGY (TKE) CALCULATED BY AN ADDITIONAL
C     PROGNOSTIC EQUATION, WHICH CONSIDERS ADVEKTION OF TKE.
C          IN THE SECOND PART OF THE ROUTINE THE IMPLICIT LINEAR
C     SYSTEMS FOR U,V FIRST AND T,Q SECOND ARE SOLVED BY A *GAUSSIAN
C     ELIMINATION BACK-SUBSTITUTION METHOD. FOR T AND Q THE LOWER
C     BOUNDARY CONDITION DEPENDS ON THE SURFACE STATE.
C     FOR TKE THE LOWER BOUNDARY CONDITION DEPENDS ON THE SQUARE OF
C     THE FRICTIONAL VELOCITY.
C     OVER LAND, TWO DIFFERENT REGIMES OF EVAPORATION PREVAIL:
C     A STOMATAL RESISTANCE DEPENDENT ONE OVER THE VEGETATED PART
C     AND A SOIL RELATIVE HUMIDITY DEPENDENT ONE OVER THE
C     BARE SOIL PART OF THE GRID MESH.
C     POTENTIAL EVAPORATION TAKES PLACE OVER THE SEA, THE SNOW
C     COVERED PART AND THE LIQUID WATER COVERED PART OF THE
C     GRID MESH AS WELL AS IN CASE OF DEW DEPOSITION.
C          FINALLY ONE RETURNS TO THE VARIABLE TEMPERATURE TO COMPUTE
C     ITS TENDENCY AND THE LATER IS MODIFIED BY THE DISSIPATION'S EFFECT
C     (ONE ASSUMES NO STORAGE IN THE TURBULENT KINETIC ENERGY RANGE) AND
C     THE EFFECT OF MOISTURE DIFFUSION ON CP. Z0 IS UPDATED AND THE
C     SURFACE FLUXES OF T AND Q AND THEIR DERIVATIVES ARE PREPARED AND
C     STORED LIKE THE DIFFERENCE BETWEEN THE IMPLICITELY OBTAINED
C     CP(Q)T+GZ AND CP(Q)T AT THE SURFACE.
C

C     REFERENCE.
C     ----------
C
C          SEE VERTICAL DIFFUSION'S PART OF THE MODEL'S DOCUMENTATION
C     FOR DETAILS ABOUT THE MATHEMATICS OF THIS ROUTINE.
C
C     AUTHOR.
C     -------
C     U. SCHLESE     DKRZ-HAMBURG  FEB-93
C       MODIFIED     E. ROECKNER  - 1994
C       MODIFIED     G. LENDERINK - 1999
C
C       BASED  ON  ORIGINAL ECMWF VERSION BY J.F. GELEYN  - 1982
C                                MODIFIED BY C.B. BLONDIN - 1986
C                                            H. FEICHTER  - 1991
C                                            S. BRINKOP   - 1992
C                                            M. CLAUSSEN  - 1993

      INCLUDE 'comio.h'
      INCLUDE 'comcon.h'
      INCLUDE 'comph2.h'
      INCLUDE 'paramsoil.h'
      INCLUDE 'comveg.h'
      INCLUDE 'yotluc.h'


      LOGICAL LO,LO1
CDIR$ VFUNCTION EXPHF, SQRTHF
C*vdir vectfunc (sqrthf)
CDIR$ VFUNCTION LOGHF


      LOGICAL LALAND(KLP2) ,LVDIFF,LSURF
      REAL PACLCM(KLP2,KLEV),  PAPHM1(KLP2,KLEVP1), PAPM1(KLP2,KLEV)
     *    ,PGEOM1(KLP2,KLEV),  PQM1(KLP2,KLEV),     PTKEM(KLP2,KLEV)
     *    ,PTKEM1M(KLP2,KLEV), PTM1(KLP2,KLEV),     PUM1(KLP2,KLEV)
     *    ,PVM1(KLP2,KLEV),    PXM1(KLP2,KLEV),     PTVM1(KLP2,KLEV)
      REAL PAHFLM(KLP2),       PAHFSM(KLP2),        PAZ0M(KLP2)
     *    ,PDEW2M(KLP2),       PEVAPM(KLP2),        PFORESTM(KLP2)
     *    ,PSEAICE(KLP2),      PSNM1M(KLP2),        PSRFL(KLP2)
     *    ,PTEMP2M(KLP2),      PTSM1M(KLP2),        PT2MAXM(KLP2)
     *    ,PT2MINM(KLP2),      PUSTAR3M(KLP2),      PUSTRM(KLP2)
     *    ,PU10M(KLP2),        PVDISM(KLP2),        PVSTRM(KLP2)
     *    ,PV10M(KLP2),        PWIMAXM(KLP2),       PWIND10M(KLP2)
     *    ,PWLM1M(KLP2),       PWSM1M(KLP2),        PWSMXM(KLP2)
     *    ,PVLTM(KLP2) ,       PSINLAT(KLP2)
     *    ,PBLHM(KLP2) ,       PTKEVIM(KLP2)
     *    ,PTSM(KLP2),         PWSM(KLP2)
      REAL PTKE(KLP2,KLEV),    PTKEM1(KLP2,KLEV),   DTKEDT(KLP2,KLEV)
     *    ,PKE(KLP2,KLEV)
      REAL PAHFL(KLP2),        PAHFS(KLP2),         PAZ0(KLP2)
     *    ,PCVGHL(KLP2),       PCVS(KLP2),          PCVW(KLP2)
     *    ,PDEW2(KLP2),        PDHFQS(KLP2)
     *    ,PDHFQW(KLP2),       PDHFT(KLP2),         PEVAP(KLP2)
     *    ,PQHFL(KLP2),        PRSFL(KLP2),         PTEMP2(KLP2)
     *    ,PTHFL(KLP2),        PT2MAX(KLP2),        PT2MIN(KLP2)
     *    ,PUSTAR3(KLP2),      PUSTR(KLP2),         PU10(KLP2)
     *    ,PVDIS(KLP2),        PVSTR(KLP2),         PV10(KLP2)
     *    ,PWIMAX(KLP2),       PWLMX(KLP2),         PWIND10(KLP2)
     *    ,PXHFL(KLP2)
     *    ,PBLH(KLP2),         PTKEVI(KLP2) 
      REAL PVOL(KLP2,KLEV),    PVOM(KLP2,KLEV),     PQTE(KLP2,KLEV)
     *    ,PTTE(KLP2,KLEV),    PXTE(KLP2,KLEV)
      REAL PVGRAT(KLP2)
CGEERT
      REAL PMFU(KLP2,KLEV), PLPARCEL(KLP2)

!
!     TEMPORARY ARRAYS
!
      INCLUDE 'paramh.h'
      INCLUDE 'paramv100.h'

      REAL ZCFM(JPHR,MLEV),    ZDIS(JPHR,MLEV)
     *    ,ZCFH(JPHR,MLEV),    ZCPTGZ(JPHR,MLEV),   ZEBSM(JPHR,MLEV)
     *    ,ZUDIF(JPHR,MLEV),   ZVDIF(JPHR,MLEV)
     *    ,ZWET(JPHR),         ZQS(JPHR),           ZDQS(JPHR)
     *    ,ZCPTS(JPHR),        ZTVS(JPHR),          ZRI(JPHR)
     *    ,ZUCF(JPHR),         ZSCF(JPHR),          ZCFNC(JPHR)
     *    ,ZCDN(JPHR),         ZTCOE(JPHR),         ZWLMXI(JPHR)
      REAL ZCR(JPHR),          ZRS0(JPHR),          ZHUM(JPHR)
     *    ,ZCSAT(JPHR),        ZCAIR(JPHR),         ZTDIF(JPHR,MLEV)
     *    ,ZQDIF(JPHR,MLEV),   ZEBSH(JPHR,MLEV),    ZVIDIS(JPHR)
     *    ,Z1MXTM1(JPHR),      ZTHETATS(JPHR)
      REAL ZBN(JPHR),          ZBM(JPHR),           ZBH(JPHR)
     *    ,ZCHN(JPHR),  ZCH(JPHR),  ZUSTAR(JPHR), ZWST(JPHR)
     *    ,ZRICLS(JPHR), ZTESS(JPHR), ZCFNCH(JPHR)
     *    ,ZHSOIL(JPHR)
     *    ,ZHDYN(JPHR),        ZTETA1(JPHR,MLEV),   ZLTETA1(JPHR,MLEV)
     *    ,ZTVIR1(JPHR,MLEV),  ZHH(JPHR,MLEVM1),    ZQSS(JPHR,MLEV)
     *    ,ZXDIF(JPHR,MLEV),   ZEDIF(JPHR,MLEV),    ZTKEVN(JPHR,MLEV)
     *    ,ZTETA1PR(JPHR,MLEV) 
      REAL ZQSSM(JPHR,MLEVM1), ZTMITTE(JPHR,MLEVM1),ZTVIRMIT(JPHR,MLEVM1) 
     *    ,ZFAXEN(JPHR,MLEVM1),ZFAXE(JPHR,MLEV),    ZCCOVER(JPHR,MLEVM1)
     *    ,ZLWCMIT(JPHR,MLEVM1),ZTEMIT(JPHR,MLEVM1),ZQMIT(JPHR,MLEVM1)
     *    ,ZCDUM(JPHR,MLEV)
      REAL ZSENKF (JPHR),       ZLATKF (JPHR),      ZUSTAR1(JPHR)
     *    ,ZCDH(JPHR)   ,       ZCDM   (JPHR)
     *    ,ZPBLH  (JPHR),       ZOBUKL (JPHR),      ZBUOYPR(JPHR)

      INTEGER IHPBL(JPHR),     IHPBLC(JPHR),        IHPBLD(JPHR)
CEVM
      REAL ZDPH   (JPHR,MLEVP1),ZBETA(JPHR)
     *    ,ZCFHSRF(JPHR)       ,WRIH(JPHR)

CGEERT
      REAL  PTM1PR(JPHR,MLEV)
     *   ,ZGBUOY(JPHR,MLEV), ZGSHEAR(JPHR,MLEV), ZGRI(JPHR,MLEV)
     *   ,ZMIXDWH(JPHR, MLEV), ZMIXUPH(JPHR, MLEV)          
     *   ,ZMIXDWM(JPHR, MLEV), ZMIXUPM(JPHR, MLEV)
     *   ,ZMIXQUADH(JPHR,MLEV), ZMIXQUADM(JPHR,MLEV)
     *   ,ZGMONIN(JPHR), ZGWST(JPHR)
CGEERT
      REAL 
     *    DZ_PARCEL(JPHR), TKE_PARCEL_UP(JPHR), TH_PARCEL_UP(JPHR), 
     *    TKE_CBL(JPHR)

      REAL  ZVARQTMF(JPHR,MLEV) ,ZQLMF(JPHR,MLEV), ZPMFU(JPHR,MLEV)
      COMMON /PREVIOUS/ ZVARQTMF, ZQLMF, ZPMFU 

cgeert
C---------------------------------------------------------
C     common block, only for oned !
      include "comtke.h"
C---------------------------------------------------------


C======================================================================
C     DEFINE NAMELIST *NAMECH4* (ONLY SUITABLE FOR SINGLE-COLUMN)
C
C     (OPPORTUNITY TO INITIALIZE LOCAL SWITCHES)
C  
      LOGICAL LINIT
      NAMELIST/NAMECH4/LSRFFLUX_OFF,LSRFFLUX_READ,LTS_OBS,LDISS_OFF
     +                ,CREFLUX,LAZ0FIX,LSRFFLUX_TBX,FEPDU
CGEERT                
     +                ,LLSCALE_MOD, L_UPDATED, LK_MFU  
     +                ,ZENTR, ZPRANDTL, L_STABLE, LFRICHSTAB_ECMWF
      LOGICAL LSRFFLUX_OFF,LSRFFLUX_READ,LTS_OBS,LDISS_OFF,LAZ0FIX
      LOGICAL LSRFFLUX_TBX, LFRICHSTAB_ECMWF
CGEERT    
      LOGICAL LLSCALE_MOD, L_UPDATED, LK_MFU, L_STABLE

CGEERT  
C     L_STABLE: 

      DATA LINIT/.TRUE./
      DATA LSRFFLUX_OFF,LDISS_OFF/.FALSE.,.FALSE./
      DATA LSRFFLUX_READ,LTS_OBS/.FALSE.,.FALSE./
      DATA LAZ0FIX/.FALSE./
      DATA LSRFFLUX_TBX/.FALSE./
      DATA CREFLUX/0./
      DATA FEPDU/0.01/
      DATA LFRICHSTAB_ECMWF /.FALSE./

CGEERT 
      DATA ZENTR /0.3/
      DATA ZPRANDTL /1.00/
      DATA LLSCALE_MOD /.TRUE./
      DATA L_UPDATED   /.FALSE./
      DATA L_STABLE    /.FALSE./
      DATA LK_MFU /.FALSE./
CGEERT

c      if (mod(nstep,10).eq.0) write (0,'(a)') 
c     +  'Be aware! This is a test version ec4_vdiffnew running'
C
      IF (MLEV.LT.KLEV) STOP ' INCREASE JPNLEV IN PARAMV100 '
C
C     READ NAMELIST *NAMECH4*
C     ---- -------- --------
C
      IF (LINIT) THEN
        NUNECH=19
        NUNNAM= 7
        OPEN (UNIT=NUNECH ,FORM='FORMATTED',STATUS='OLD',FILE='namech4')
	READ  (NUNECH,NAMECH4)
	WRITE (NUNNAM,NAMECH4)
	CLOSE (NUNECH)
	WRITE (6,NAMECH4)
	IF (LSRFFLUX_OFF) LSRFFLUX_READ = .FALSE.
	IF (.NOT.LSRFFLUX_READ) LTS_OBS = .FALSE.
        DO JUN=1,2
	IF (JUN.EQ.1) IUNOUT=6
	IF (JUN.EQ.2) IUNOUT=NUNNAM
	IF (LSRFFLUX_OFF) THEN
	  WRITE (IUNOUT,'(A)') 
     +    ' *** SURFACE HEAT FLUXES IN *EC_VDIFF* TURNED OFF BY HAND *'
	END IF
	IF (LSRFFLUX_READ) THEN
	  IF (LSRFFLUX_TBX) THEN
	    WRITE (IUNOUT,'(A)') 
     +        ' *** OBSERVED SURFACE FLUXES TAKEN IN TEBEX-FORMAT ***'
	  ELSE
	    WRITE (IUNOUT,'(A)') 
     +       ' *** OBSERVED SURFACE FLUXES TAKEN IN OLD FORMAT ***'
	  END IF
	  IF (LTS_OBS) THEN
	    WRITE (IUNOUT,'(A)') 
     +        ' *** OBSERVED SURFACE TEMPERATURES USED ***'
	  ELSE
	    WRITE (IUNOUT,'(A)') 
     +        ' *** SURFACE TEMPERATURES CALCULATED ***'
	  END IF
	  IF (CREFLUX.NE.0.0) THEN
	    WRITE (IUNOUT,'(A,F12.5,A)') 
     +        ' *** FRACTION ',CREFLUX,' MOVED FROM LATF TO SENF ***'
	  END IF
	END IF
        IF (LDISS_OFF) THEN
	  WRITE (IUNOUT,'(A)') 
     +    ' *** DISSIPATION IN *EC_VDIFF* TURNED OFF BY HAND ***'
        END IF
        IF (LAZ0FIX) THEN
          WRITE (IUNOUT,'(A)')
     +       ' *** SEA SURFACE ROUGHNESS LENGTH FIXED *** '
        END IF
        IF (FEPDU.NE.0.01) THEN
          WRITE (IUNOUT,'(A,E8.2,A)')
     +       ' *** MINIMUM VALUE FOR SHEAR SET TO ',FEPDU,' M/S ***' 
        END IF
	ENDDO
	LINIT = .FALSE.
      END IF

C======================================================================


!
!     PHYSICAL CONSTANTS.
!
!     *ZLAM* IS THE ASYMPTOTIC MIXING LENGTH FOR MOMENTUM EXCHANGE,
!     *ZKAP* IS THE VON KARMAN CONSTANT, *ZB*, *ZC* AND *ZD* ARE SOME
!     CONSTANTS FOR THE FORMULAE ABOUT STABILITY DEPENDENCY RESPECTIVELY
!     NEAR THE NEUTRAL CASE, IN THE UNSTABLE CASE AND IN THE STABLE
!     CASE AND *ZCHAR* IS THE CONSTANT OF THE *CHARNOCK FORMULA.
!     *ZQWSSAT* AND *ZQSNCR* ARE THE INVERSES OF CRITICAL VALUES FOR
!     SOIL WATER AND SNOW DEPTH THAT ARE USED IN THE COMPUTATION OF THE
!     EVAPOTRANSPIRATION'S EFFICIENCY.
!
!
      ZLAM=CLAM                         ! assymtotic mixing length (300 m)
      ZKAP=CKAP
      ZB=CB
      ZC=CC
      ZD=CD
      IF (LFRICHSTAB_ECMWF) ZD = 1.
      ZCHAR=CCHAR
      ZVA=CVA
      ZVB=CVB
      ZVC=CVC
      ZVBC=CVBC
      ZVK=CVK
      ZVKC=CVKC
      ZVABC=CVABC
      ZVRAD=CVRAD
      ZWLMAX=CWLMAX
      ZQSNCR=CQSNCR

      ZUSTF=3.75
      ZDA1=ZUSTF**2                  ! dissipation length scale
      ZNEUTR = 1./(ZUSTF**0.5)        ! scaling neutral lengthscale at surf

      ZWSTF=0.2
      ZTKEMIN=1.E-5
      ZTMELT=TMELT
      ZRVRD=VTMPC1+1.
      ZRDRV=1./ZRVRD
 
      ZCPD=CPD
      ZRD=RD
      ZKAPPA=ZRD/ZCPD
      ZC3LES=C3LES
      ZC3IES=C3IES
      ZC4LES=C4LES
      ZC4IES=C4IES
!
!     PARAMETERS FOR BOUNDARY LAYER DIAGNOSTICS
!     
 
      ZHUV=10.*G
      ZHTQ=2.*G
      ZEPHUM=5.E-2
      ZRHOS=RHOH2O*1.025
 
!
!     SECURITY PARAMETERS.
!    
!     ZEPDU2 IS A MINIMUM SQUARED WIND INCREMENT TO AVOID DIVIDING BY
!     ZERO IN THE *RICHARDSON NUMBER'S CALCULATION AND ZEPZZO IS A
!     MINIMUM ROUGHNESS LENGTH.
 
C     ZEPDU2=0.1
      ZEPDU2=FEPDU**2
      ZEPZZO=1.5E-05
      ZEPZ0O=2.
      ZEPCOR=5.E-05
!
!     ZEPSW IS THE MINIMUM RELATIVE HUMIDITY OF THE GROUND,
!     ZEPSR IS A MINIMUM VALUE FOR THE RADIATION IN THE
!     VISIBLE PART OF THE SPECTRUM USED TO COMPUTE THE
!     CANOPY RESISTANCE.
!
      ZEPSW=1.E-3
      ZEPSR=1.E-10
!
!     ZEPEVAP IS THE MINIMUM ATMOSPHERIC DEMAND
!
      ZEPEVAP=1.E-10
!
!     ZEPSEC IS A MINIMUM VALUE FOR THE DRAG COEFFICIENT
!
      ZEPSEC=1.E-2
!
!     COMPUTATIONAL CONSTANTS.
!
      ZTMST=TWODT
      IF (NSTEP.EQ.NSTART) ZTMST=0.5*TWODT
      ZDIAGT=CONACC*TWODT
      ZDIAGW=ZDIAGT/RHOH2O
 
      ZTPFAC1= CVDIFTS      
      ZTPFAC2=1./ZTPFAC1
      ZTPFAC3=1.-ZTPFAC2
      ZTPFAC4=1.+ZTPFAC3


 
      ZZZLAM=30.
      ZCONS2=0.5*ZKAP/G
      ZCONS3=ZLAM
      ZCONS5=3.*ZB*ZC*G**2
      ZCONS6=1./3.
      ZCONS8=2.*ZB
      ZCONS9=3.*ZB
      ZCONS10=1./CPD
      ZCONS11=3.*ZB*ZC
      ZCONS12=ZTPFAC1*ZTMST*G/RD
      ZCONS13=1./ZTMST
      ZCONS14=ZCHAR*RD/(G**2*ZTMST)
      ZCONS15=1./(G*ZTMST)
      ZCONS16=CPD*VTMPC2
      ZCONS18=ZTPFAC1*ZTMST*G**2
      ZCONS17=1./ZKAP**2
      ZCONS25=ZCONS2/ZCONS3

 
      ZPLMAX=0.75
      ZPLMIN=0.35
 
      ZCHNEU=.3
!
!     CONSTANT FOR FREE CONVECTION
!     EXPONENT FOR THE INTERPOLATION BETWEEN FREE CONVECTION
!     AND NEUTRAL OVER SEA
!
      ZFREEC=0.0016
      ZGAM=1.25
      Z1DGAM=1./ZGAM
!
!     NEUTRAL STABILITY FUNCTIONS (MELLOR/YAMADA, 1982)
!
      ZH1= 2.22
      ZH2= 0.22
      ZM1= 1.24
      ZM2= 2.37
      ZM4= 3.69
      ZSHN=ZH1*ZH2*SQRT(2.)
      ZSMN=ZSHN*ZM1*ZM2/ZM4
 
      ITOP=1
      ITOPP1=ITOP+1

!     GEERT 
!     DO SOME TIME FILTERING TO FILTER OUT 2DT MODE LEAP FROG SCHEME
!
      ZTIMFIL = MIN (1. , ZTMST / 600.)        ! RELAXATION IN ABOUT 10 MINUTES
      DO JK=KTDIA+1,KLEV-1
        DO JL=KIDIA,KFDIA 
          ZPMFU(JL,JK) = ZTIMFIL * PMFU (JL,JK)  + (1 - ZTIMFIL)*ZPMFU(JL,JK)
        ENDDO
      ENDDO 


!
!*    1. LOCATE AND POSITION SPACE.
!     

C     ITASK=IQTASK()
      IROW=1
C     IGPTYPE=3+ITASK

!
!*    2. NEW THERMODYNAMIC VARIABLE AND BOUNDARY CONDITIONS.
!    

!
!*    DETERMINE PRESSURE THICKNESS ZDPH
!
      CALL COPYRE(PAPM1(KIDIA,1) , ZDPH(KIDIA,1) , KLON)
      DO JK=1,KLEVM1
        CALL DIFFRE(PAPM1(KIDIA,JK+1),PAPM1(KIDIA,JK)
     +             ,ZDPH(KIDIA,JK+1),KLON)
      ENDDO
      CALL DIFFRE(PAPHM1(KIDIA,KLEVP1),PAPM1(KIDIA,KLEV)
     +           ,ZDPH(KIDIA,KLEVP1),KFDIA-KIDIA+1)

!
!     GEERT 
!     IF L_UPDATED COMPUTE WITH UPDATE TENDENCY FOR PTM1 
!
      RFUZ = ZTPFAC1
      DO JK=KTDIA,KLEV
        DO JL=KIDIA,KFDIA
         PTM1PR(JL,JK)=PTM1(JL,JK)
         IF (L_UPDATED) 
     *     PTM1PR(JL,JK)=PTM1(JL,JK) + RFUZ*ZTMST*PTTE(JL,JK)
        ENDDO
      ENDDO
       
!
!     REPLACE T BY CP(Q)*T+GZ IN THE ATMOSPHERE.
!
      DO JK=KTDIA,KLEV
        DO JL=KIDIA,KFDIA
          LO=PTM1(JL,JK).GE.ZTMELT
          XTST = 1. ! (1.+VTMPC2*PQM1(JL,JK))
          ZFAXE(JL,JK)=CVMGT(ALV,ALS,LO)
          ZCPTGZ(JL,JK)=PGEOM1(JL,JK)+PTM1PR(JL,JK)*CPD
     *             *(1.+VTMPC2*PQM1(JL,JK))
          ZTETA1(JL,JK)=PTM1(JL,JK)*(100000./PAPM1(JL,JK))
     *         **(ZKAPPA/XTST)
          ZTETA1PR(JL,JK)=PTM1PR(JL,JK)*(100000./PAPM1(JL,JK))
     *         **(ZKAPPA/XTST)
          ZTVIR1(JL,JK)=ZTETA1(JL,JK)*(1.+VTMPC1*PQM1(JL,JK)-PXM1(JL,JK))
 
          ZBET=ZFAXE(JL,JK)/(ZCPD*XTST)
          ZUSUS1=ZBET*ZTETA1(JL,JK)/PTM1(JL,JK)*PXM1(JL,JK)
          ZLTETA1(JL,JK)=ZTETA1(JL,JK)-ZUSUS1
 
          IT=PTM1(JL,JK)*1000.
          ZES=TLUCUA(IT)/PAPM1(JL,JK)
          ZES=MIN(ZES,0.5)
          ZCOR=1./(1.-VTMPC1*ZES)
          ZQSS(JL,JK)=ZES*ZCOR
        ENDDO
      ENDDO
 
      DO JK=KTDIA,KLEVM1
        DO JL=KIDIA,KFDIA
          ZHH(JL,JK)=(PGEOM1(JL,JK)-PGEOM1(JL,JK+1))
          ZSDEP1=(PAPHM1(JL,JK)-PAPHM1(JL,JK+1))/(PAPHM1(JL,JK)-
     1        PAPHM1(JL,JK+2))
          ZSDEP2=(PAPHM1(JL,JK+1)-PAPHM1(JL,JK+2))/(PAPHM1(JL,JK)-
     1        PAPHM1(JL,JK+2))
     
          ZQSSM(JL,JK)=ZSDEP1*ZQSS(JL,JK)+ZSDEP2*ZQSS(JL,JK+1)
          ZTMITTE(JL,JK)=ZSDEP1*PTM1(JL,JK)+ZSDEP2*PTM1(JL,JK+1)
          ZTVIRMIT(JL,JK)=ZSDEP1*ZTVIR1(JL,JK)+ZSDEP2*ZTVIR1(JL,JK+1)
          ZFAXEN(JL,JK)=ZSDEP1*ZFAXE(JL,JK)+ZSDEP2*ZFAXE(JL,JK+1)
          ZLWCMIT(JL,JK)=ZSDEP1*PXM1(JL,JK)+ZSDEP2*PXM1(JL,JK+1)
          ZQMIT(JL,JK)=ZSDEP1*PQM1(JL,JK)+ZSDEP2*PQM1(JL,JK+1)
          ZTEMIT(JL,JK)=ZSDEP1*ZTETA1(JL,JK)+ZSDEP2*ZTETA1(JL,JK+1)
          ZCCOVER(JL,JK)=PACLCM(JL,JK)*ZSDEP1+PACLCM(JL,JK+1)*ZSDEP2
        ENDDO
      ENDDO
!
!     COMPUTE FRACTIONAL SURFACE COVERAGES
!
      DO JL=KIDIA,KFDIA
        PCVS(JL)=MIN(1.,PSNM1M(JL)*ZQSNCR)
        PWLMX(JL)=ZWLMAX*((1.-PVGRAT(JL))+PVGRAT(JL)*PVLTM(JL))
        ZWLMXI(JL)=1./PWLMX(JL)
        PCVW(JL)=PWLM1M(JL)*ZWLMXI(JL)
      ENDDO

!
!*    SATURATION PARAMETERS,
!*    RELATIVE HUMIDITY OVER THE BARE LAND PART
!*    AND VIRTUAL TEMPERATURE AT THE SURFACE.
!
 
      DO JL=KIDIA,KFDIA
        LO=(PTSM1M(JL)-TMELT).GT.0.
        ZCVM3=CVMGT(C3LES,C3IES,LO)
        ZCVM4=CVMGT(C4LES,C4IES,LO)
        ZCVM5=CVMGT(C5LES,C5IES,LO)
        IT=PTSM1M(JL)*1000.
        ZES=TLUCUA(IT)/PAPHM1(JL,KLEVP1)
        ZCOR=1./(1.-VTMPC1*ZES)
        ZQS(JL)=ZES*ZCOR
        ZDQS(JL)=ZQS(JL)*ZCVM5*ZCOR*(1./(PTSM1M(JL)-ZCVM4))**2
        PWSM1M(JL)=MIN(PWSM1M(JL),PWSMXM(JL))
        ZWSTOP=MIN(0.1,PWSMXM(JL))
        ZWSLEV=PWSMXM(JL)-ZWSTOP
        IF(PWSM1M(JL).GT.ZWSLEV) THEN
          ZHUM(JL)=0.5*(1.-COS((PWSM1M(JL)-ZWSLEV)*API/ZWSTOP))
c        IF(PWSM1M(JL).GT.ZWSTOP) THEN
c          ZHUM(JL)=0.5*(1.-COS((PWSM1M(JL)-ZWSTOP)*API/ZWSLEV))
        ELSE
         ZHUM(JL)=0.
        ENDIF
        ZHSOIL(JL)=PCVS(JL)+(1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))
     >           *ZHUM(JL))
        ZHSOIL(JL)=CVMGT(ZHSOIL(JL),1.,LALAND(JL))

CGEERT  CORRECTION IN MOIST CONDITIONS
        ZHSOIL(JL)= ZHSOIL(JL) + PACLCM(JL,KLEV)*(1.-ZHSOIL(JL))

        LO=PQM1(JL,KLEV).GT.ZQS(JL)
        ZHSOIL(JL)=CVMGT(1.,ZHSOIL(JL),LO)
        ZTESS(JL)=PTSM1M(JL)*(1.E5/PAPHM1(JL,KLEVP1))**ZKAPPA
        ZTVS(JL)=ZTESS(JL)*(1.+VTMPC1*ZHSOIL(JL)*ZQS(JL))
CGEERT  NO MOISTURE CORRECTION
        ZTVS(JL) = ZTESS(JL)*(1.+VTMPC1*PQM1(Jl,KLEV))
      ENDDO

!
!*    DEFINITION OF THE STOMATAL RESISTANCE
!
      DO JL=KIDIA,KFDIA
        ZWCRIT=ZPLMAX*PWSMXM(JL)
        ZWPWP=ZPLMIN*PWSMXM(JL)
        ZQWEVAP=1./(ZWCRIT-ZWPWP)
        ZSOIL=MAX(ZEPSW,MIN(1.,(PWSM1M(JL)-ZWPWP)*ZQWEVAP))
        ZSRFL=MAX(ZEPSR,PSRFL(JL)*ZVRAD)
        ZABCS=(ZVA+ZVBC)/(ZVC*ZSRFL)
        ZVKLT=ZVK*PVLTM(JL)
        ZVXPKLT=EXP(ZVKLT)
        ZVXMKLT=EXP(-ZVKLT)
        ZLN1=LOG((ZABCS*ZVXPKLT+1.)/(ZABCS+1.))
        ZLN2=LOG((ZABCS+ZVXMKLT)/(ZABCS+1.))
        ZRSI=(ZVB*ZLN1/ZVABC-ZLN2)/ZVKC
        ZRS0(JL)=1./ZRSI
        ZWET(JL)=ZRS0(JL)/ZSOIL
        LO=PQM1(JL,KLEV).GT.ZQS(JL)
        ZWET(JL)=CVMGT(0.,ZWET(JL),LO)
      ENDDO


C***
      IF (LVDIFF) THEN
C***



!
!
!*    3. COMPUTATION OF THE EXCHANGE COEFFICIENTS.
!
!     THE SURFACE LAYER IS NOW COMPUTED BEFORE THE OTHER LEVELS
!

!
!*    COMPUTATION OF BASIC QUANTITIES: WIND SHEAR,
!*    RICHARDSON NUMBER,SQUARED MIXING LENGTHS, UNSTABLE
!*    AND STABLE CASE COMMON FACTORS AND NEUTRAL CASE
!*    COMMON PART OF THE DRAG COEFFICIENTS.
!

      DO 311 JL=KIDIA,KFDIA
        ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
        ZQMITTE=(PQM1(JL,KLEV)+ZQS(JL)*ZHSOIL(JL))/2.
        ZQTMIT=PXM1(JL,KLEV)*0.5+ZQMITTE
        ZTMIT=(PTM1(JL,KLEV)+PTSM1M(JL))/2.
        ZTEMITTE=(ZTETA1(JL,KLEV)+ZTESS(JL))/2.
        ZVIRMITTE=(ZTVIR1(JL,KLEV)+ZTVS(JL))/2.
        ZQSMIT=(ZQSS(JL,KLEV)+ZQS(JL))/2.
        ZQLWI1=PQM1(JL,KLEV)+PXM1(JL,KLEV)
        ZQLWI2=ZQS(JL)*ZHSOIL(JL)
CGEERT
        ZQLWI2=ZQLWI1

        ZFUX=ZFAXE(JL,KLEV)/(ZCPD*ZTMIT)
        ZFOX=ZFAXE(JL,KLEV)/(ZRD*ZTMIT)
        ZMULT1=1.+VTMPC1*ZQTMIT
        ZMULT2=ZFUX*ZMULT1-ZRVRD
        ZMULT3=ZRDRV*ZFOX*ZQSMIT/(1.+ZRDRV*ZFOX*ZFUX*ZQSMIT)
        ZMULT5=ZMULT1-ZMULT2*ZMULT3
        ZMULT4=ZFUX*ZMULT5-1.
 
        PACLCM(JL,KLEV) = MIN(1., PACLCM(JL,KLEV))
        PACLCM(JL,KLEV) = MAX(0., PACLCM(JL,KLEV))

        ZDUS1=PACLCM(JL,KLEV)*ZMULT5+(1.-PACLCM(JL,KLEV))*ZMULT1
        ZDUS2=PACLCM(JL,KLEV)*ZMULT4+(1.-PACLCM(JL,KLEV))*VTMPC1
        ZTELDIF=ZLTETA1(JL,KLEV)-ZTESS(JL)
        ZQDDIF=ZQLWI1-ZQLWI2
        ZBUOY=ZDUS1*ZTELDIF+ZDUS2*ZTEMITTE*ZQDDIF

CGEERT  DRY BUOY. 

c        ZTESS(JL)=PTSM1M(JL)*(1.E5/PAPHM1(JL,KLEVP1))**ZKAPPA
c        ZTVS(JL)=ZTESS(JL)*(1.+VTMPC1*0.8*ZQS(JL))
c        ZTVNLEV = ZTETA1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV))
c        ZBUOY = ZTVNLEV - ZTVS(JL)
     
        ZGBUOY(JL,KLEV) = G/ZVIRMITTE*ZBUOY*(G/PGEOM1(JL,KLEV)) 

c        dtkebuoy(klev)   = ZGBUOY(JL,klev)
c        zmixlength(klev) = PWSM1M(JL)
c        dtkeshear(klev)  = ZQLWI2*1e3 
c        dtkediss(klev)   = ZHSOIL(JL) 
c        zrichard(klev)   = PCVW(JL)
c        dtkenld(klev)    = PCVS(JL)
         
         dzhelp = PGEOM1(JL,KLEV)/G
c        ZRI(JL)=PGEOM1(JL,KLEV)*ZBUOY/(ZVIRMITTE*ZDU2)
         ZRI(JL)=PGEOM1(JL,KLEV)*ZBUOY/(ZVIRMITTE*
     &                 (ZDU2 + 1e-6*PTKEM1M(JL,KLEV)*DZHELP**2 ))

        ZGRI(JL,KLEV) = ZRI(JL)
         
        ZRICLS(JL)=ZRI(JL)
        ZCDN(JL)=(ZKAP/LOG(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL))))**2
        Z0H=PAZ0M(JL)*EXP(2.-86.276*PAZ0M(JL)**0.375)
        ZALO=LOG(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))
        ZALOH=LOG(1.+PGEOM1(JL,KLEV)/(G*Z0H))
        ZCHN(JL)=ZKAP**2/(ZALO*ZALOH)
        ZUCF(JL)=1./(1.+ZCONS11*ZCDN(JL)*SQRT(ABS(ZRI(JL))*(1.
     &          +PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))))
        ZSCF(JL)=SQRT(1.+ZD*ABS(ZRI(JL)))
        ZCONS=ZCONS12*PAPHM1(JL,KLEVP1)/
     &      (PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV)))
        ZCFNC(JL)=ZCONS*SQRT(ZDU2)*ZCDN(JL)
        ZCFNCH(JL)=ZCONS*SQRT(ZDU2)*ZCHN(JL)
        ZDTHV=MAX(0.,(ZTVS(JL)-ZTVIR1(JL,KLEV)))
        ZWST(JL)=ZDTHV*SQRT(ZDU2)/ZVIRMITTE
        ZCR(JL)=(ZFREEC/(ZCHN(JL)*SQRT(ZDU2)))*ABS(ZBUOY)**ZCONS6
C
C       CANOPY RESISTANCE
C
        ZWET(JL)=ZWET(JL)/ZCONS
        ZRS0(JL)=ZRS0(JL)/ZCONS
 311  CONTINUE

C
C*    3.2  DIMENSIONLESS HEAT TRANSFER COEFFICIENTS MULTIPLIED
C*         BY PRESSURE THICKNESSES FOR MOMENTUM AND HEAT EXCHANGE
C
 320  CONTINUE

 
      DO 321 JL=KIDIA,KFDIA
        IF(ZRI(JL).GE.0.) THEN
          ZCFM(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS8*ZRI(JL)/ZSCF(JL))
          IF(LALAND(JL)) THEN
	    IF (LFRICHSTAB_ECMWF) THEN
              ZCFH(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS8*ZRI(JL)*ZSCF(JL))
            ELSE
              ZCFH(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS9*ZRI(JL)*ZSCF(JL))
            ENDIF
            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNC(JL)*ZCDN(JL)
          ELSE
	    IF (LFRICHSTAB_ECMWF) THEN
              ZCFH(JL,KLEV)=ZCFNCH(JL)/(1.+ZCONS8*ZRI(JL)*ZSCF(JL))
            ELSE
              ZCFH(JL,KLEV)=ZCFNCH(JL)/(1.+ZCONS9*ZRI(JL)*ZSCF(JL))
            ENDIF
            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNCH(JL)*ZCHN(JL)
          END IF
        ELSE
          ZCFM(JL,KLEV)=ZCFNC(JL)*(1.-ZCONS8*ZRI(JL)*ZUCF(JL))
          IF(LALAND(JL)) THEN
            ZCFH(JL,KLEV)=ZCFNC(JL)*(1.-ZCONS9*ZRI(JL)*ZUCF(JL))

CGEERT      DO CORRECTION FOR LOW SHEAR CASES
C
C           SQUARED SURFACE CONVECTIVE SCALE WSSURF
C           W_C^2 = G/THETA * DTHETAV * DZ

            WSSURF = 1.*MAX(0.,-PGEOM1(JL,KLEV)*ZGBUOY(JL,KLEV)/(ZVIRMITTE))

C           CORRECTION
            ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
            ZCFH(JL,KLEV) = ZCFH(JL,KLEV)* SQRT(1. + WSSURF / ZDU2)

            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNC(JL)*ZCDN(JL)
          ELSE
C
C*          SPECIAL FREE CONVECTION LIMIT OVER SEA
C
            ZCFH(JL,KLEV)=ZCFNCH(JL)*((1.+ZCR(JL)**ZGAM)**Z1DGAM)
            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNCH(JL)*ZCHN(JL)
          END IF
        END IF

        ZCDUM(JL,KLEV)=ZCFM(JL,KLEV)
        ZCDUM(JL,KLEV)=0.

CEVM    ------------------------------------------------------
        IF (LSRFFLUX_READ) THEN
          ZCFHSRF(JL)=ZCFH(JL,KLEV)
	  WRIH   (JL)=ZRI (JL)
        ENDIF
C   
C       IF *LSRFFLUX_OFF* = .TRUE. TURN OFF THE SURFACE FLUXES
C       FOR SENSIBLE AND LATENT HEAT
C
        IF (LSRFFLUX_OFF) THEN
          CALL RESETR (ZCFH (KIDIA,KLEV),KFDIA-KIDIA+1,0.)
          CALL RESETR (ZCFHSRF (KIDIA),KFDIA-KIDIA+1,0.)
        END IF
CEVM    ------------------------------------------------------

C
C       INTERPOLATIONFUNCTIONS FOR DIAGNOSTICS
C
        ZBN(JL)=ZKAP/SQRT(ZCDN(JL))
        ZBM(JL)=MAX(ZEPSEC,SQRT(ZCFM(JL,KLEV)*ZCDN(JL)*
     &          ZCONS17/ZCFNC(JL)))
        ZBH(JL)=MAX(ZEPSEC,ZCH(JL)/ZBM(JL)*ZCONS17)
        ZBM(JL)=1./ZBM(JL)
        ZBH(JL)=1./ZBH(JL)
 321  CONTINUE

C
C*    3.3    EQUIVALENT EVAPOTRANSPIRATION EFFICIENCY COEFFICIENT
C
 330  CONTINUE

      DO 331 JL=KIDIA,KFDIA
        ZWET(JL)=PCVS(JL)+(1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))/
     *           (1.+ZCFH(JL,KLEV)*ZWET(JL)))
        ZWET(JL)=CVMGT(ZWET(JL),1.,LALAND(JL))
COBC
        LO=(ZHUM(JL)*ZQS(jl)).LE.PQM1(JL,KLEV)
        ZCSAT(JL)=PCVS(JL)+
     *    (1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))*CVMGT(0.,ZHUM(JL),LO))
        ZCAIR(JL)=PCVS(JL)+
     *    (1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))*CVMGT(0.,1.,LO))
        ZCSAT(JL)=CVMGT(ZCSAT(JL),1.,LALAND(JL))
        ZCAIR(JL)=CVMGT(ZCAIR(JL),1.,LALAND(JL))
        LO=PQM1(JL,KLEV).GT.ZQS(JL)
        ZCSAT(JL)=CVMGT(1.,ZCSAT(JL),LO)
        ZCAIR(JL)=CVMGT(1.,ZCAIR(JL),LO)
        ZCSAT(JL)=PVGRAT(JL)*ZWET(JL)+(1.-PVGRAT(JL))*ZCSAT(JL)
        ZCAIR(JL)=PVGRAT(JL)*ZWET(JL)+(1.-PVGRAT(JL))*ZCAIR(JL)
CEVM    ------------------------------------------------------
        IF (LSRFFLUX_READ) THEN
          IF (NSTEP.GT.0) THEN
	    ZCSAT(JL)=ZBETA(JL)
	    ZCAIR(JL)=ZBETA(JL)
          END IF
        END IF
CEVM    ------------------------------------------------------
        ZCPTS(JL)=PTSM1M(JL)*CPD*(1.+VTMPC2*
     *         (ZCSAT(JL)*ZQS(JL)+(1.-ZCAIR(JL))*PQM1(JL,KLEV)))

        ZTHETATS(JL)=PTSM1M(JL) * (100000./PAPHM1(JL,KLEV+1))**ZKAPPA
        ZTHETATS(JL) = ZTESS (JL)
CGEERT  PAS OP WORDT EVEN GEBRUIKT IN SURFACE LAYER 
C        dtkediff(klev)   = ZCSAT(JL)*ZQS(JL)+(1.-ZCAIR(JL))*PQM1(JL,KLEV)
 331  CONTINUE

C
C*    3.4       COMPUTATION OF THE PBL EXTENSION.
C
 340  CONTINUE

      DO 341 JL=KIDIA,KFDIA
        ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
CJHC
C       ------------------------------------------------
C       ECHAM CORIOLIS-FUNCTION CHANGED INTO HIRLAM SINLAT ARRAY
C       ------------------------------------------------
CJHC    ZCOR=MAX(ABS(CORIOL(IROW)),ZEPCOR)
        ZCOR=MAX(ABS(2.*OMEGA*PSINLAT(JL)),ZEPCOR)

        LO=PAZ0M(JL).GT.ZEPZ0O
        ZCDN2M=CVMGT((ZKAP/LOG(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O)))**2,
     &        ZCDN(JL),LO)
        ZCDNR=ZCDN2M/ZCDN(JL)
        ZCFM2M=CVMGT(ZCFNC(JL)*ZCDNR*(1.-ZCONS8*ZRI(JL)/(1.+ZCONS11*
     &     ZCDN2M*SQRT(ABS(ZRI(JL))*(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O))))),
     &       ZCFM(JL,KLEV)*ZCDNR,LO.AND.ZRI(JL).LT.0.)
        ZUSTAR(JL)=SQRT(ZCFM2M*SQRT(ZDU2)*PTM1(JL,KLEV)*
     &       (1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV))
     &       /(ZCONS12*PAPHM1(JL,KLEVP1)))
        ZHDYN(JL)=MIN(PGEOM1(JL,1)/G,ZCHNEU*ZUSTAR(JL)/ZCOR)
 
        IHPBLC(JL)=KLEV
        IHPBLD(JL)=KLEV
 341  CONTINUE
 

      DO 343 JK=KLEVM1,1,-1
        DO 342 JL=KIDIA,KFDIA
          ZDS=ZCPTGZ(JL,JK)-ZCPTGZ(JL,KLEV)
          ZDZ=PGEOM1(JL,JK)/G-ZHDYN(JL)
          IHPBLC(JL)=ICVMGT(JK,IHPBLC(JL),IHPBLC(JL).EQ.KLEV.AND.ZDS.GT.0.)
          IHPBLD(JL)=ICVMGT(JK,IHPBLD(JL),IHPBLD(JL).EQ.KLEV.AND.ZDZ.GE.0.)
 342    CONTINUE
 343  CONTINUE
C
C      CONVECTIVE VELOCITY SCALE, MONIN-OBUKHOV LENGTH AND
C      TKE BOUNDARY CONDITION (MAILHOT/BENOIT, 1982)
C
      
      DO 344 JL=KIDIA,KFDIA

CGEERT  A BETTER MONIN OB. LENGTH SCALE
        ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
        ZGWST(JL) = (ZCPTS(JL) - ZCPTGZ(JL,KLEV))
        DCPTMIN = 0.1*ZCPD
        IF (ABS(ZGWST(JL)).LE.DCPTMIN) THEN
          ZGWST(JL) = DCPTMIN 
        ENDIF 
       
        ZGWST(JL) = ZGWST(JL)*SQRT(ZDU2)/ZCPTS(JL)
        ZMONOB=(ZUSTAR(JL)**3)/(ZKAP*G*ZGWST(JL)*ZCH(JL))
        
c        zmixlength(klev) = ZMONOB
c        dtkebuoy(klev)   = ZUSTAR(JL)
c        dtkeshear(klev)  = ZGWST(JL)
c        dtkediss(klev)   = ZCH(JL)
c        zrichard(klev)   = ZGRI(JL,KLEV)

        IHPBL(JL)=MIN0(IHPBLC(JL),IHPBLD(JL),KLEV-3)
        ZGHABL=MIN(50000.,PGEOM1(JL,IHPBL(JL)))
        IF(ZWST(JL).GT.ZEPSR) THEN                         ! ??? related to radiation
          ZCONVS=(ZWST(JL)*ZCH(JL)*ZGHABL)**ZCONS6
c          ZMONOB=(ZUSTAR(JL)**3)/(ZKAP*G*ZWST(JL)*ZCH(JL))
          ZSTABF=(PGEOM1(JL,KLEV)/(G*ZMONOB))**(ZCONS6*2.)
          ZSTABF=MIN(ZUSTF*3.,ZSTABF)
        ELSE
          ZCONVS=0.
          ZSTABF=0.
        ENDIF
        ZTKEVN(JL,KLEV)=(ZUSTF+ZSTABF)*(ZUSTAR(JL)**2)
     &      +ZWSTF*(ZCONVS**2)
        ZTKEVN(JL,KLEV)=MAX(ZTKEMIN,ZTKEVN(JL,KLEV))

        print *, 'testing new BC Tke', ZCONVS  

cgeert testing simple BL formulation TKE

        ZTKEVN(JL,KLEV)=ZUSTF*ZUSTAR(JL)**2
     &      + ZWSTF*ZCONVS**2
c        ZTKEVN(JL,KLEV)=ZUSTF*ZUSTAR(JL)**2
c     &      * (MAX(0.1, 1 - ZGRI(JK,KLEV) ))**0.5
        ZTKEVN(JL,KLEV)=MAX(ZTKEMIN,ZTKEVN(JL,KLEV))


        ZGMONIN(JL) =  ZMONOB 

  344 CONTINUE


      IF(NSTEP.EQ.NSTART) THEN
        DO 345 JL=KIDIA,KFDIA
         PTKEM1M(JL,KLEV)=ZTKEVN(JL,KLEV)
         PTKEM(JL,KLEV)=ZTKEVN(JL,KLEV)
  345   CONTINUE
      ENDIF
         

!
!     COMPUTATION OF BASIC QUANTITIES: WIND SHEAR,
!     BUOYANCY, RICHARDSON NUMBER, MIXING LENGTHS.
!
!     MODIFIED RICHARDSON NUMBER IN VERTICAL LOOP
!
      DO JK=KTDIA,KLEVM1
CDIR$ IVDEP
        DO JL=KIDIA,KFDIA
          ZQTMIT=ZLWCMIT(JL,JK)+ZQMIT(JL,JK)
          ZFUX=ZFAXEN(JL,JK)/(ZCPD*ZTMITTE(JL,JK))
          ZFOX=ZFAXEN(JL,JK)/(ZRD*ZTMITTE(JL,JK))
CGEERT    CUIJPERS COEFFICIENTS USED
          ZMULT1=1.+VTMPC1*ZQTMIT
          ZMULT2=1.-ZQTMIT + ZRVRD*ZQSSM(JL,JK)*
     *                      (1.+ ZRDRV*ZFOX)
          ZMULT5=ZMULT2/
     *       (1.+ZRDRV*ZFUX*ZFOX*ZQSSM(JL,JK))
          ZMULT4=ZFUX*ZMULT5-1.
          ZXB = ZCCOVER(JL,JK)
          ZDUS1=ZXB*ZMULT5+(1.-ZXB)*ZMULT1
          ZDUS2=ZXB*ZMULT4+(1.-ZXB)*VTMPC1

          ZTELDIF=(ZLTETA1(JL,JK)-ZLTETA1(JL,JK+1))/ZHH(JL,JK)*G
          ZTEDIF = (ZTETA1(JL,JK)-ZTETA1(JL,JK+1))/ZHH(JL,JK)*G
          ZTVIRDIF = (ZTVIR1(JL,JK)-ZTVIR1(JL,JK+1))/ZHH(JL,JK)*G
         
          
          ZDQTOT=(PQM1(JL,JK)+PXM1(JL,JK))-(PQM1(JL,JK+1)+PXM1(JL,JK+1))
          ZQDDIF=ZDQTOT/ZHH(JL,JK)*G
          ZBUOY=( ZTELDIF*ZDUS1 +
     *          ZTEMIT(JL,JK)*ZDUS2*ZQDDIF ) * G/ZTVIRMIT(JL,JK)

          ZBUOY_MOIST =( ZTELDIF*ZMULT5 +
     *          ZTEMIT(JL,JK)*ZMULT4*ZQDDIF ) * G/ZTVIRMIT(JL,JK)

          ZBUOY_DRY = ZTVIRDIF * G/ZTVIRMIT(JL,JK)

          ZSDDIF = (ZCPTGZ(JL,JK)-ZCPTGZ(JL,JK+1))/ZHH(JL,JK)*G
          CPM = CPD * (1.+VTMPC2*PQM1(JL,JK))
          ZBUOY_SD = G / (CPM * ZTMITTE(JL,JK)) * ZSDDIF * 
     *                    (1. +  VTMPC1 * ZQTMIT) +
     *               1.*  G * VTMPC1 * ZQDDIF   

          ZDIVV=(PUM1(JL,JK)-PUM1(JL,JK+1))**2
          ZDIVV1=(PVM1(JL,JK)-PVM1(JL,JK+1))**2
          ZSHEAR=MAX(ZEPDU2,(ZDIVV+ZDIVV1))*(G/ZHH(JL,JK))**2

          ZRI(JL)=ZBUOY/ZSHEAR
CGEERT
C         to prevent becoming infinit in case of low shear
          ZRI(JL) = ZBUOY/( ZSHEAR + 1e-6*PTKEM1M(JL,JK))
          ZGBUOY(JL,JK) = ZBUOY
          ZGSHEAR(JL,JK) = ZSHEAR 
          ZGRI(JL,JK) = ZRI(JL)

        ENDDO
      ENDDO
        
C
C     CGEERT
C 
C     COMPUTE A SIMPLE QUADRATIC LENGTH SCALE
C     THIS IS A PRELIMINARY CODE, WHICH GIVES A "QUADRATIC" LENGTHSCALE
C     ACCORDING TO 1/ZMIXQUAD = 1/ZMIXUP + 1/ZMIXDW
C     ZMIXUP: LENGTHSCALE FROM BOTTOM (SAY GROUND)
C        LOWER BOUNDARY: GROUND OR LOWEST POSITION UNSTABLE LAYER
C     ZMIXDW: LENGTHSCALE FROM TOP (SAY INVERSION)
C        UPPER BOUNDARY: "INVERSION"
C     BOTH ZMIXUP AND ZMIXDW INCREASE FOR UNSTABLE AND NEUTRAL 
C     CONDITIONS, AND DECREASE FOR STABLE CONDITIONS.
C     THIS IS GOVERNED BY ZBUOYTHRESS; SMALL ZBUOYTHRESS ==> 
C     STRONG DAMPING STABLE CONDITIONS (INVERSION), AND 
C     INCREASE FOR UNSTABLE CONDITIONS. 
C     IN NEUTRAL CONDITIONS THE LENGTHSCALE ZMIXUP ~ ZMIXQUAD ~ 0.4*Z 
C     NEAR THE SURFACE
C     ZPRANDT: GOVERNS DIFFERENCE BETWEEN LENGTHSCALE FOR MOMENTUM
C              AND HEAT.
C     
C     

      
      DO JL=KIDIA,KFDIA   
        TH_PARCEL_UP(JL) = PTM1(JL,KLEV)*(1.E5/PAPM1(JL,KLEV))**ZKAPPA + 0.2      
        TKE_PARCEL_UP(JL) = 0.1 
        DZ_PARCEL(JL) = 0.
        TKE_CBL(JL) = 0.

        DO JK = KLEVM1, KTDIA+1, -1          ! VERTICAL LOOP BOTTOM-UP

          RHO = 0.5*(PAPHM1(JL,JK+1)+PAPHM1(JL,JK+2))
     *             /(ZRD*(PTVM1(Jl,JK+1)))
          DZ = (PAPHM1(JL,JK+2) - PAPHM1(JL,JK+1))/(G*RHO)

          TH_ENV = PTM1(JL,JK)*(1.E5/PAPM1(JL,JK))**ZKAPPA  ! improve interpolation !!!
          ZEPSILON = DZ/500.
          TH_PARCEL_UP(JL) =  TH_PARCEL_UP(JL) +            ! simple entrainment 
     *        ZEPSILON*(TH_ENV - TH_PARCEL_UP(JL))          
          DBUOY = G / TH_ENV * (TH_PARCEL_UP(JL) - TH_ENV)  
          IF (TKE_PARCEL_UP(JL) .GT. -DBUOY*DZ) THEN
            DZ_PARCEL(JL) = DZ_PARCEL(JL) + DZ
            TKE_PARCEL_UP(JL) = TKE_PARCEL_UP(JL)  + DBUOY*DZ
            TKE_CBL(JL) =  TKE_CBL(JL) + DZ*0.5*
     *          (PTKEM1M(JL,JK) + PTKEM1M(JL,MIN(JK+1,KLEVM1)))
          ELSE
            ZFAC = TKE_PARCEL_UP(JL) / (-DBUOY*DZ) 
            DZ_PARCEL(JL) = DZ_PARCEL(JL) + ZFAC*DZ
            PLPARCEL(JL) = DZ_PARCEL(JL)
            TKE_PARCEL_UP(JL) = TKE_PARCEL_UP(JL) + DBUOY*DZ
            TKE_CBL(JL) =  TKE_CBL(JL) + ZFAC*DZ*0.5*
     *          (PTKEM1M(JL,JK) + PTKEM1M(JL,MIN(JK+1,KLEVM1)))
            TKE_CBL(JL) =  TKE_CBL(JL)/DZ_PARCEL(JL)
            GOTO 999
          ENDIF

        ENDDO    ! JK LOOP
999   ENDDO      ! JL LOOP


c-----------------------------------------------------------------------

      ZBUOYTHRESS = 0.2E-4            ! TUNING PARAMETERS !
      ZPRANDT =  0.6 ! 0.6 
      ZALPHA = 0.
      PI2 = 2. * ATAN(1.)
      ZFINEUTR = ZNEUTR *ZKAP 
      ZFIAS =  ZNEUTR *ZKAP * 3. / ZPRANDT         !   1.666

      print *, 'zfias mom = ', ZFIAS*ZPRANDT
      ZBRI = 4.0     ! 5
      IF (L_STABLE) ZBRI = 8.
!      
!     COMPUTE BOTTOM UP LENGTH SCALE
!
      DO JL=KIDIA,KFDIA                   
        ZMIXUPH(JL, KLEV) = 0.
        ZMIXUPM(JL, KLEV) = 0.
      ENDDO

      DO JK = KLEVM1, KTDIA+1, -1          ! VERTICAL LOOP BOTTOM-UP
         DO JL=KIDIA,KFDIA   

          RHO = 0.5*(PAPHM1(JL,JK+1)+PAPHM1(JL,JK+2))
     *             /(ZRD*(PTVM1(Jl,JK+1)))
          DZ = (PAPHM1(JL,JK+2) - PAPHM1(JL,JK+1))/(G*RHO)
                       
          ZBUOY_FUL = 0.5*(ZGBUOY(JL,JK) + ZGBUOY(JL,MIN(JK+1,KLEVM1))) 
          X = ZBUOY_FUL / ZBUOYTHRESS 
          ZRI_FUL = 0.5*(ZGRI(JL,JK) + ZGRI(JL,MIN(JK+1,KLEV))) 
cgeert test 
c          IF (L_STABLE) ZRI_FUL = ZRI_FUL - 0.05

          XARM = ZBRI * PI2 * ZNEUTR * ZKAP  / (ZFIAS*ZPRANDT - ZFINEUTR)
          XARH = ZBRI * PI2 * ZNEUTR * ZKAP  / (ZFIAS - ZFINEUTR)

          XM = XARM * ZRI_FUL
          XH = XARH * ZRI_FUL

          IF (X.GT.0) THEN
            DZM = ZFINEUTR*DZ - (ZFIAS*ZPRANDT - ZFINEUTR)/PI2
     *                          *DZ*XM
            DZH = ZFINEUTR*DZ - (ZFIAS - ZFINEUTR)/PI2
     *                          *DZ*XH
          ELSE
            DZM = ZFINEUTR*DZ - (ZFIAS*ZPRANDT - ZFINEUTR)/PI2
     *                          *DZ*ATAN(XM)
            DZH = ZFINEUTR*DZ - (ZFIAS - ZFINEUTR)/PI2
     *                          *DZ*ATAN(XH)
          ENDIF

!         BOTTOM UP LENGTHSCALE

          ZMIXUPH(JL, JK) =  ZMIXUPH (JL, JK + 1) + DZH
          ZMIXUPH(JL, JK) = MAX(ZMIXUPH(JL, JK) , 0.)
          ZMIXUPM(JL, JK) =  ZMIXUPM (JL, JK + 1) + DZM
          ZMIXUPM(JL, JK) = MAX(ZMIXUPM(JL, JK) , 0.)

        ENDDO
      ENDDO

!
!     COMPUTE TOP DOWN LENGTH SCALE 
!
      DO JL=KIDIA,KFDIA                   
        ZMIXDWH(JL, KTDIA) = 0.
        ZMIXDWM(JL, KTDIA) = 0.
      ENDDO

      DO JK= KTDIA + 1, KLEVM1            ! VERTICAL LOOP TOP, DOWN
        DO JL=KIDIA,KFDIA     

          RHO = 0.5*(PAPHM1(JL,JK+1)+PAPHM1(JL,JK))
     *             /(ZRD*(PTVM1(Jl,JK)))
          DZ = (PAPHM1(JL,JK+1) - PAPHM1(JL,JK))/(G*RHO)
                   
          ZBUOY_FUL = 0.5*(ZGBUOY(JL,JK) + ZGBUOY(JL,JK-1)) 
          X = ZBUOY_FUL / ZBUOYTHRESS

          ZRI_FUL = 0.5*(ZGRI(JL,JK) + ZGRI(JL,JK-1)) 
cgeert test 
c          IF (L_STABLE) ZRI_FUL = ZRI_FUL - 0.05

          XARM = ZBRI * PI2 * ZNEUTR * ZKAP  / (ZFIAS*ZPRANDT - ZFINEUTR)
          XARH = ZBRI * PI2 * ZNEUTR * ZKAP  / (ZFIAS - ZFINEUTR)

          XM = XARM * ZRI_FUL
          XH = XARH * ZRI_FUL

           IF (X.GT.0) THEN
            DZM = ZFINEUTR*DZ - (ZFIAS*ZPRANDT - ZFINEUTR) / PI2
     *                          *DZ*XM
            DZH = ZFINEUTR*DZ - (ZFIAS -ZFINEUTR) / PI2
     *                          *DZ*XH
          ELSE
            DZM = ZFINEUTR*DZ - (ZFIAS*ZPRANDT - ZFINEUTR) / PI2
     *                          *DZ*ATAN(XM)
            DZH = ZFINEUTR*DZ - (ZFIAS - ZFINEUTR) / PI2
     *                          *DZ*ATAN(XH)
          ENDIF

!         TOP DOWN LENGTHSCALE 

          ZZZLAM = 75.
          Z2GEOMF=PGEOM1(JL,JK)+PGEOM1(JL,JK+1)
          ZHEIGHT = Z2GEOMF / (G*2.) 
c          ZMIX_HELP = ZZZLAM / (1 + ZZZLAM / (ZNEUTR *ZKAP * ZHEIGHT))
          ZMIX_HELP = ZZZLAM * EXP ( - ZHEIGHT / 500.) 
          IF ( .NOT. L_STABLE) ZMIX_HELP = 0.


          ZMIXDWH(JL,JK) =  ZMIXDWH (JL,JK - 1)  +  DZH             
          ZMIXDWH(JL,JK) = MAX (ZMIXDWH(JL,JK),ZMIX_HELP) 

          ZMIXDWM(JL,JK) =  ZMIXDWM (JL,JK - 1)  +  DZM
          ZMIXDWM(JL,JK) = MAX (ZMIXDWM(JL,JK),ZMIX_HELP)    

!         COMPOSED LENGTH SCALE OF TOP-DOWN LS AND BOTTOM-UP LS

          ZAVE = 1
          ZLENGTHRH = 1. / ZMIXDWH(JL,JK)**ZAVE 
     *              + 1. / ZMIXUPH(JL,JK)**ZAVE
          ZMIXQUADH(JL,JK) = 1. / ZLENGTHRH**(1./ZAVE)
          ZLENGTHRM = 1. / ZMIXDWM(JL,JK)**ZAVE 
     *              + 1. / ZMIXUPM(JL,JK)**ZAVE
          ZMIXQUADM(JL,JK) = 1. / ZLENGTHRM**(1./ZAVE)

         ENDDO
      ENDDO                                  ! END VERTICAL LOOP

C
C     END COMPUTATION FREE TURBULENCE LENGTH SCALE 
C     LENGTHSCALES ARE IN ZMIXQUADH (HEAT) AND ZMIXQUADM (MOMENTUM)
C     

C
CGEERT
C     BEGIN NEW LOOP
C
C***
      DO JK=KTDIA,KLEVM1
C***
        DO JL=KIDIA,KFDIA
C
C       ASYMPTOTIC MIXING LENGTH FOR MOMENTUM AND
C       HEAT (ZLAM) ABOVE THE PBL AS A FUNCTION OF HEIGHT
C       ACCORDING TO HOLTSLAG AND BOVILLE (1992), J. CLIMATE.
C
        ZHEXP=EXP(1.-PGEOM1(JL,JK)/PGEOM1(JL,IHPBL(JL)))
        ZLAM=ZZZLAM+(ZCONS3-ZZZLAM)*ZHEXP
        IF(JK.GE.IHPBL(JL)) THEN
          ZCONS23=ZCONS25
        ELSE
          ZCONS23=ZCONS2/ZLAM
        ENDIF
C
C       MIXING LENGTH (BLACKADAR) + STABILITY DEPENDENT FUNCTION
C
        Z2GEOMF=PGEOM1(JL,JK)+PGEOM1(JL,JK+1)
        ZZ2GEO=ZCONS2*Z2GEOMF 
        ZMIX=ZZ2GEO/(1.+ZCONS23*Z2GEOMF)

        IF (LLSCALE_MOD) THEN
CGEERT
C         BRINKOP AND ROECKNER (1995) FORMULATION FOR THE 
C         MIXING LENGTH SCALES
C         ZNBRUNT = BRUNT VAISALA FREQUENCY (SQUARED)
C         ZENTR  = ENTRAINMENT PARAMETER
C         ZMAILBEN = CONSTANT MAILHOT AND BENOIT (1982) 
   
          ZMAILBEN= 1.00
C          ZENTR = 0.20
          ZENTRH  = ZENTR
c          ZENTRM  = ZENTR * MAX(1.,MIN(1.+ZGRI(JL,JK)*4.,10.))
c          ZRIHELP = MAX (ZGRI(JL,JK),0.0)
c          ZHELP = EXP ( - ZRIHELP *4)  
c     *          + 4. * ZRIHELP * EXP (-ZRIHELP/4.)
c     *          + 10 * (1-EXP(-ZRIHELP/10))

          ZHELP =  MAX(1.,MIN(1.+ZGRI(JL,JK)*2.,100.)) 
          ZENTRM  = ZENTR * MAX(1.,MIN(ZHELP,4.))
c          ZENTRM = ZENTR

          ZZZLAM = 75.0
          Z2GEOMF=PGEOM1(JL,JK)+PGEOM1(JL,JK+1)
          ZHEIGHT = Z2GEOMF / (G*2.) 

        ! limited to half the neutral value
          ZMIX2 = ZZZLAM / (1 + ZZZLAM / ( 0.5 * ZNEUTR *ZKAP * ZHEIGHT))

          ZMIXH =  MAX(ZMIXQUADH(JL,JK),ZMIX2)         
          ZMIXM =  MAX(ZMIXQUADM(JL,JK),ZMIX2)

          RPOW = 2                                          ! NO PHYS.
					                    ! ADDED FOR CONTINUITY BETWEEN UNSTABLE AND STABLE
          ZMIXH =  (ZMIX2**RPOW + ZMIXQUADH(JL,JK)**RPOW)**(1./RPOW) 
          ZMIXM =  (ZMIX2**RPOW + ZMIXQUADM(JL,JK)**RPOW)**(1./RPOW)


          ZNBRUNT = ZGBUOY(JL,JK)
          ZTKESQ  = SQRT(MAX(PTKEM1M(JL,JK),ZTKEMIN))

          IF (ZNBRUNT.GT.0) THEN
            ZMIXCH = 1. +  ZMIXH*SQRT(ZNBRUNT)/(ZENTRH*ZTKESQ)     
            ZMIXCM = 1. +  ZMIXM*SQRT(ZNBRUNT)/(ZENTRM*ZTKESQ)     
          ELSE
            ZMIXCH = 1.
            ZMIXCM = 1.
          ENDIF        

          ZSM=ZMAILBEN/ZMIXCM
          ZSH=ZMAILBEN/ZMIXCH

c new      
           RPOW =  - 2
           IF (ZNBRUNT.GT.0) THEN
             ZMIXH_STABLE = ZENTRH * ZTKESQ / SQRT(ZNBRUNT)
             ZMIXCH = (ZMIXH_STABLE**(RPOW) + ZMIXH**(RPOW))**(1./RPOW) 
             ZMIXCH = ZMIXH / ZMIXCH 
             ZMIXM_STABLE = ZENTRM * ZTKESQ / SQRT(ZNBRUNT)
             ZMIXCM = (ZMIXM_STABLE**(RPOW) + ZMIXM**(RPOW))**(1./RPOW) 
             ZMIXCM = ZMIXM / ZMIXCM 
           ELSE
             ZMIXH_STABLE = 0.
             ZMIXCH = 1.
             ZMIXCM = 1.
           ENDIF        

          ZSM=ZMAILBEN/ZMIXCM
          ZSH=ZMAILBEN/ZMIXCH


c          DTKENLD(JK) = ZFAC_INH 
CGEERT

        ELSE
C
C         STABILITY FUNCTIONS (LOUIS, 1979)
C

          ZRI(JL) = ZGRI(JL,JK)
          ZMIXH = ZMIX
          ZMIXM = ZMIX

          ZALH2=ZMIX*ZMIX
          ZUCF(JL)=1./(1.+ZCONS5*ZALH2*SQRT(ABS(ZRI(JL))*(((PGEOM1(JL,JK)
     *           /PGEOM1(JL,JK+1))**ZCONS6-1.)/(PGEOM1(JL,JK)
     *        -PGEOM1(JL,JK+1)))**3/(PGEOM1(JL,JK+1))))
          IF(ZRI(JL).LT.0.) THEN
            ZSH=ZSHN*(1.-ZCONS9*ZRI(JL)*ZUCF(JL))
            ZSM=ZSMN*(1.-ZCONS8*ZRI(JL)*ZUCF(JL))
          ELSE
            ZSH=ZSHN/(1.+ZCONS8*ZRI(JL)*SQRT(1.+ZRI(JL)))
            ZSM=ZSMN/(1.+ZCONS8*ZRI(JL)/SQRT(1.+ZD*ZRI(JL)))
          ENDIF


CGEERT
C
C       ENDIF (LLSCALE_MOD)
        ENDIF

C
C*      3.7       DIMENSIONLESS COEFFICIENTS MULTIPLIED BY PRESSURE
C*                 THICKNESSES FOR MOMENTUM AND HEAT EXCHANGE.
C

        ZTKESQ  = sqrt(max(PTKEM1M(JL,JK),ZTKEMIN))        
        ZZB=ZGSHEAR(JL,JK)*ZMIXM*ZSM-ZGBUOY(JL,JK)*ZMIXH*ZSH
        ZDISL=ZDA1*ZMIXM*ZSM/ZTMST

        ZKTEST=1.+(ZZB*ZTMST+SQRT(PTKEM1M(JL,JK))*2.)/ZDISL
        IF (ZKTEST.LE.1.) THEN
          ZTKEVN(JL,JK)=ZTKEMIN
        ELSE
         ZTKEVN(JL,JK)=MAX(ZTKEMIN,(ZDISL*(SQRT(ZKTEST)-1.))**2)
        ENDIF

c         ZTKEVN(JL,JK) = PTKEM1M(JL,JK) + ZTMST *
c     *      (ZZB * ZTKESQ - ZTKESQ**3 / (ZDA1*ZMIXM*ZSM) )  


        IF(NSTEP.EQ.NSTART) THEN
          PTKEM1M(JL,JK)=ZTKEVN(JL,JK)
          PTKEM(JL,JK)=ZTKEVN(JL,JK)
        ENDIF


        ZZZM=ZMIXM*ZSM*ZTKESQ 
        ZZZH=ZMIXH*ZSH*ZTKESQ


cgeert  ----------------------------------------------------------
c       store in common block, only for oned !
        zmixlength(jk) = ZSH*ZMIXH
        zmixmlength(jk) = ZSM*ZMIXM       

c        zmixlength(jk) = ZMIXDWH(JL,JK)
c        zmixmlength(jk) = ZGBUOY(JL,JK)
        dtkenld(jk) =  ZMIXH_STABLE 


        dtkebuoy(jk) = -ZGBUOY(JL,JK)*ZZZH 
        dtkeshear(jk)  = ZZZM*ZGSHEAR(JL,JK)
        ldw(jk)  = ZMIXDWH(jl,jk) ! ZMIXQUADH(jl,jk)
        lup(jk)  = ZMIXUPH(jl,jk) ! ZMIXQUADH(jl,jk)
        lquad(jk)   = ZMIXQUADH(jl,jk)
        lmin(jk)   = ZMIX2

        dtkediss(jk)   =-ZTKEVN(JL,JK)**1.5/(ZDISL*ZTMST)
        zrichard(jk)   = -ZGRI(JL,JK)
       
c       ---------------------------------------------------------------
   
CGEERT  ADD ADDITIONAL MIXING IN THE CASE WHEN THE MASSFLUX SCHEME
C       IS ACTIVE
C       NOTE THAT THIS K DOES NOT AFFECT THE BUOYANCY PRODUCTION
C       OF THE TKE SCHEME

        IF (LK_MFU) THEN

          ZMHFAC=(ZENTRM/ZENTRH)                   !testing 
          ZMHFAC=1.
          ZZZM = ZZZM + ZPMFU(JL,JK+1)*100.*ZMHFAC 
          ZZZH = ZZZH + ZPMFU(JL,JK+1)*100. 

        ENDIF

        ZZTVM=(PTVM1(JL,JK)+PTVM1(JL,JK+1))*0.5
        ZALF=PAPHM1(JL,JK+1)/(ZZTVM*ZHH(JL,JK)*ZRD)
        ZCFM(JL,JK)=ZZZM*ZCONS18*ZALF
        ZCFH(JL,JK)=ZZZH*ZCONS18*ZALF
        ZCDUM(JL,JK)=ZCFM(JL,JK) * 2. 
c       ZCDUM(JL,JK)= ZMIXM*ZTKESQ*ZCONS18*ZALF

CGEERT  
C       END HORIZONTAL (JL) AND VERTICAL (JK) LOOP 
        ENDDO
      ENDDO

      
C     ----------------------------------------------------------------
C*    3.8        DIFFUSION IMPLICIT COMPUTATIONS FOR TKE
C     -----------------------------------------------------------------

      DO 380 JK=KTDIA,KLEV
        DO 381 JL=KIDIA,KFDIA
          ZEDIF(JL,JK)=ZTPFAC2*ZTKEVN(JL,JK)
  381   CONTINUE
  380 CONTINUE

!      ZCDUM(1,KLEV) = -ZCDUM(1,KLEVM1)

      DO 385 JL=KIDIA,KFDIA
        ZTCOE(JL)=(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5
        ZQDP=1./(PAPM1(JL,ITOPP1)-PAPM1(JL,ITOP))
        ZDISC=1./(1.+(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5*ZQDP)
        ZEBSM(JL,ITOP)=ZDISC*(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5*ZQDP
        ZEDIF(JL,ITOP)=ZDISC*ZEDIF(JL,ITOP)
  385 CONTINUE
 
      DO 386 JK=ITOPP1,KLEV-2
        DO 387 JL=KIDIA,KFDIA
          ZQDP=1./(PAPM1(JL,JK+1)-PAPM1(JL,JK))
          ZFAC=ZTCOE(JL)*ZQDP
          ZTCOE(JL)=(ZCDUM(JL,JK+1)+ZCDUM(JL,JK))*0.5
          ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,JK-1))+(ZCDUM(JL,JK+1)+
     &    ZCDUM(JL,JK))*0.5*ZQDP)
          ZEBSM(JL,JK)=ZDISC*(ZCDUM(JL,JK+1)+ZCDUM(JL,JK))*0.5*ZQDP
          ZEDIF(JL,JK)=ZDISC*(ZEDIF(JL,JK)+ZFAC*ZEDIF(JL,JK-1))
  387   CONTINUE
  386 CONTINUE
 
      DO 390 JL=KIDIA,KFDIA
        ZQDP=1./(PAPM1(JL,KLEV)-PAPM1(JL,KLEVM1))
        ZFAC=ZTCOE(JL)*ZQDP
        ZTCOE(JL)=(ZCDUM(JL,KLEV)+ZCDUM(JL,KLEVM1))*0.5
        ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,KLEV-2))+(ZCDUM(JL,KLEV)+
     &     ZCDUM(JL,KLEVM1))*0.5*ZQDP)
        ZEDIF(JL,KLEVM1)=ZDISC*((ZCDUM(JL,KLEV)+ZCDUM(JL,KLEVM1))*0.5
     &   *ZQDP*ZEDIF(JL,KLEV)+ZEDIF(JL,KLEVM1)+ZFAC*ZEDIF(JL,KLEV-2))
  390 CONTINUE
 
      DO 392 JK=KLEV-2,ITOP,-1
        DO 393 JL=KIDIA,KFDIA
          ZEDIF(JL,JK)=ZEDIF(JL,JK)+ZEBSM(JL,JK)*ZEDIF(JL,JK+1)
  393   CONTINUE
  392 CONTINUE

C     --------------------------------------------------------------------
C     TIME INTEGRATION OF TURBULENT KINETIC ENERGY AND CHECK
C     --------------------------------------------------------------------

      DO 394 JK=ITOP,KLEV
        ZTEST=0.
        DO 395 JL=KIDIA,KFDIA
          PTKE(JL,JK)=ZEDIF(JL,JK)+ZTPFAC3*ZTKEVN(JL,JK)
          ZTEST=ZTEST+CVMGM(1.,0.,PTKE(JL,JK))
CEVM
          DTKEDT(JL,JK)=(PTKE(JL,JK)-PTKEM1M(JL,JK))/ZTMST
  395   CONTINUE
        IF ( ZTEST.NE.0. ) THEN 
c            PRINT *, 'TKE IS NEGATIVE = ', PTKE(JL,JK)
            PTKE(JL,JK)= ZTKEMIN
        ENDIF
 394  CONTINUE

C     ------------------------------------------------------------------
C*    TIME FILTER FOR TURBULENT KINETIC ENERGY
C     ------------------------------------------------------------------
 
      IF(NSTEP.NE.NSTART) THEN
        ZEPS=EPS
      ELSE
        ZEPS=0.
      ENDIF
      DO 397 JK=KTDIA,KLEV
        DO 396 JL=KIDIA,KFDIA
          PTKEM1(JL,JK)=PTKEM(JL,JK)
     *            +ZEPS*(PTKEM1M(JL,JK)-2.*PTKEM(JL,JK)+PTKE(JL,JK))
cgeert    only for oned 
          DTKEDIFF(JK) = (PTKE(JL,JK) - ZTKEVN(JL,JK))/ZTMST
  396   CONTINUE
  397 CONTINUE


C
C -----------------------------------------------------------------
C*    4.     DIFFUSION IMPLICIT COMPUTATIONS FOR MOMENTUM.
C            --------- -------- ------------ --- ---------
C
  400 CONTINUE

C
C*    4.1     SETTING OF RIGHT HAND SIDES.
C
  410 CONTINUE

      DO 412 JK=ITOP,KLEV
        DO 411 JL=KIDIA,KFDIA
          ZUDIF(JL,JK)=ZTPFAC2*PUM1(JL,JK)
          ZVDIF(JL,JK)=ZTPFAC2*PVM1(JL,JK)
  411   CONTINUE
  412 CONTINUE

C
C*    4.2     TOP LAYER ELIMINATION.
C
  420 CONTINUE

      DO 421 JL=KIDIA,KFDIA
        ZQDP=1./(PAPHM1(JL,ITOPP1)-PAPHM1(JL,ITOP))
        ZDISC=1./(1.+ZCFM(JL,ITOP)*ZQDP)
        ZEBSM(JL,ITOP)=ZDISC*(ZCFM(JL,ITOP)*ZQDP)
        ZUDIF(JL,ITOP)=ZDISC*ZUDIF(JL,ITOP)
        ZVDIF(JL,ITOP)=ZDISC*ZVDIF(JL,ITOP)
  421 CONTINUE

C
C*    4.3     ELIMINATION FOR MIDDLE LAYERS.
C
  430 CONTINUE
 
      DO 432 JK=ITOPP1,KLEVM1
        DO 431 JL=KIDIA,KFDIA
          ZQDP=1./(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
          ZFAC=ZCFM(JL,JK-1)*ZQDP
          ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,JK-1))+ZCFM(JL,JK)*ZQDP)
          ZEBSM(JL,JK)=ZDISC*(ZCFM(JL,JK)*ZQDP)
          ZUDIF(JL,JK)=ZDISC*(ZUDIF(JL,JK)+ZFAC*ZUDIF(JL,JK-1))
          ZVDIF(JL,JK)=ZDISC*(ZVDIF(JL,JK)+ZFAC*ZVDIF(JL,JK-1))
  431   CONTINUE
  432 CONTINUE

C
C*    4.4     BOTTOM LAYER ELIMINATION.
C
  440 CONTINUE
 
      DO 441 JL=KIDIA,KFDIA
        ZQDP=1./(PAPHM1(JL,KLEVP1)-PAPHM1(JL,KLEV))
        ZFAC=ZCFM(JL,KLEVM1)*ZQDP
        ZTCOE(JL)=ZCFM(JL,KLEV)
        ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,KLEVM1))+ZCFM(JL,KLEV)*ZQDP)
        ZUDIF(JL,KLEV)=ZDISC*(ZUDIF(JL,KLEV)+ZFAC*ZUDIF(JL,KLEVM1))
        ZVDIF(JL,KLEV)=ZDISC*(ZVDIF(JL,KLEV)+ZFAC*ZVDIF(JL,KLEVM1))
  441 CONTINUE

C
C*    4.5     BACK-SUBSTITUTION.
C
  450 CONTINUE
 
      DO 452 JK=KLEVM1,ITOP,-1
        DO 451 JL=KIDIA,KFDIA
          ZUDIF(JL,JK)=ZUDIF(JL,JK)+ZEBSM(JL,JK)*ZUDIF(JL,JK+1)
          ZVDIF(JL,JK)=ZVDIF(JL,JK)+ZEBSM(JL,JK)*ZVDIF(JL,JK+1)
  451   CONTINUE
  452 CONTINUE

C
C*    4.6     INCREMENTATION OF U AND V TENDENCIES AND STORAGE OF
C*                 THE DISSIPATION.
C
  460 CONTINUE
 
      DO 461 JL=KIDIA,KFDIA
        ZVIDIS(JL)=0.
  461 CONTINUE

      DO 471 JK=ITOP,KLEV
        DO 462 JL=KIDIA,KFDIA
          ZDUDT=(ZUDIF(JL,JK)-ZTPFAC2*PUM1(JL,JK))*ZCONS13
          PVOM(JL,JK)=PVOM(JL,JK)+ZDUDT
          ZDVDT=(ZVDIF(JL,JK)-ZTPFAC2*PVM1(JL,JK))*ZCONS13
          PVOL(JL,JK)=PVOL(JL,JK)+ZDVDT
          ZDIS(JL,JK)=0.5*((ZTPFAC2*PUM1(JL,JK)-ZUDIF(JL,JK))*(ZTPFAC4*
     *            PUM1(JL,JK)+ZUDIF(JL,JK))+(ZTPFAC2*PVM1(JL,JK)-
     *            ZVDIF(JL,JK))*(ZTPFAC4*PVM1(JL,JK)+ZVDIF(JL,JK)))
          PKE(JL,JK)=ZDIS(JL,JK)*ZCONS13
          ZVIDIS(JL)=ZVIDIS(JL)+ZDIS(JL,JK)*(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
  462   CONTINUE
  471 CONTINUE

C
C     IF *LDISS_OFF* = .TRUE. TURN OFF THE DISSIPATION OF
C     KINETIC ENERGY
C
      IF (LDISS_OFF) THEN
         DO 478 JK=ITOP,KLEV
          CALL RESETR (ZDIS (KIDIA,JK),KFDIA-KIDIA+1,0.)
          CALL RESETR (PKE  (KIDIA,JK),KFDIA-KIDIA+1,0.)
 478    CONTINUE
        CALL RESETR (ZVIDIS (KIDIA),KFDIA-KIDIA+1,0.)
      END IF

C
C*    4.8     UPDATING OF Z0 FOR OPEN SEA.
C
  480 CONTINUE

      DO  481 JL=KIDIA,KFDIA
        PAZ0(JL)=CVMGT(PAZ0M(JL),MAX(ZCONS14*ZTCOE(JL)
     *        *SQRT(ZUDIF(JL,KLEV)**2+ZVDIF(JL,KLEV)**2)
     *        *PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV))
CEVM *        /PAPHM1(JL,KLEVP1),ZEPZZO),LALAND(JL))
     *        /PAPHM1(JL,KLEVP1),ZEPZZO),LALAND(JL).OR.LAZ0FIX)
        LO=(.NOT.LALAND(JL)).AND.(PSEAICE(JL).GT.0.5)
        PAZ0(JL)=CVMGT(CZ0ICE,PAZ0(JL),LO)
        ZTAUX=ZCONS15*ZTCOE(JL)*ZUDIF(JL,KLEV)
        ZTAUY=ZCONS15*ZTCOE(JL)*ZVDIF(JL,KLEV)
        PUSTR(JL)=PUSTRM(JL)+ZDIAGT*ZTAUX
        PVSTR(JL)=PVSTRM(JL)+ZDIAGT*ZTAUY
        ZTAU=SQRT(ZTAUX**2+ZTAUY**2)
C     PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRT(ZTAU/ZRHOS)**3
C 
CEVM  951107 COMPUTE USTAR ON THE BASIS OF DENSITY OF AIR
C 
        ZRHOL=PAPHM1(JL,KLEVP1)/(ZRD*PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)))
        PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRT(ZTAU/ZRHOL)**3
        PVDIS(JL)=PVDISM(JL)+ZDIAGT*ZCONS15*ZVIDIS(JL)
  481 CONTINUE

CJHC
C     ZBUD=BUDW(IROW)
C     DVDISZ(IROW)=ZDIAGT*ZCONS15*ZBUD*SSUM(KLON,ZVIDIS,1)
CJHC



C     ------------------------------------------------------------------
C
C*    5.     DIFFUSION IMPLICIT COMPUTATIONS FOR HEAT (S.+L.).
C            --------- -------- ------------ --- ---- --------
C
  500 CONTINUE

C
C*    5.1     SETTING OF RIGHT HAND SIDES.
C
  510 CONTINUE

      DO 512 JK=ITOP,KLEV
        DO 511 JL=KIDIA,KFDIA
          ZTDIF(JL,JK)=ZTPFAC2*ZTETA1PR(JL,JK)
          ZQDIF(JL,JK)=ZTPFAC2*PQM1(JL,JK)
          ZXDIF(JL,JK)=ZTPFAC2*PXM1(JL,JK)
  511   CONTINUE
  512 CONTINUE

C
C*    5.2     TOP LAYER ELIMINATION.
C
  520 CONTINUE
 
      DO 521 JL=KIDIA,KFDIA
        ZQDP=1./(PAPHM1(JL,ITOPP1)-PAPHM1(JL,ITOP))
        ZDISC=1./(1.+ZCFH(JL,ITOP)*ZQDP)
        ZEBSH(JL,ITOP)=ZDISC*(ZCFH(JL,ITOP)*ZQDP)
        ZTDIF(JL,ITOP)=ZDISC*ZTDIF(JL,ITOP)
        ZQDIF(JL,ITOP)=ZDISC*ZQDIF(JL,ITOP)
        ZXDIF(JL,ITOP)=ZDISC*ZXDIF(JL,ITOP)
  521 CONTINUE

C
C*    5.3     ELIMINATION FOR MIDDLE LAYERS.
C
  530 CONTINUE
 
      DO 532 JK=ITOPP1,KLEVM1
        DO 531 JL=KIDIA,KFDIA
          ZQDP=1./(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
          ZFAC=ZCFH(JL,JK-1)*ZQDP
          ZDISC=1./(1.+ZFAC*(1.-ZEBSH(JL,JK-1))+ZCFH(JL,JK)*ZQDP)
          ZEBSH(JL,JK)=ZDISC*(ZCFH(JL,JK)*ZQDP)
          ZTDIF(JL,JK)=ZDISC*(ZTDIF(JL,JK)+ZFAC*ZTDIF(JL,JK-1))
          ZQDIF(JL,JK)=ZDISC*(ZQDIF(JL,JK)+ZFAC*ZQDIF(JL,JK-1))
          ZXDIF(JL,JK)=ZDISC*(ZXDIF(JL,JK)+ZFAC*ZXDIF(JL,JK-1))
  531   CONTINUE
  532 CONTINUE

C
C*    5.4     BOTTOM LAYER ELIMINATION.
C
  540 CONTINUE

      DO 541 JL=KIDIA,KFDIA
        ZQDP=1./(PAPHM1(JL,KLEVP1)-PAPHM1(JL,KLEV))
        ZFAC=ZCFH(JL,KLEVM1)*ZQDP
        ZTCOE(JL)=ZCFH(JL,KLEV)
        ZDISC=1./(1.+ZFAC*(1.-ZEBSH(JL,KLEVM1))+ZCFH(JL,KLEV)*ZQDP)
        ZDISQ=1./(1.+ZFAC*(1.-ZEBSH(JL,KLEVM1))+ZCAIR(JL)*ZCFH(JL,KLEV)
     *              *ZQDP)
        ZTDIF(JL,KLEV)=ZDISC*(ZTDIF(JL,KLEV)+(ZCFH(JL,KLEV)*ZQDP)
     *               *ZTPFAC2*ZTHETATS(JL)+ZFAC*ZTDIF(JL,KLEVM1))
        ZQDIF(JL,KLEV)=ZDISQ*(ZQDIF(JL,KLEV)+(ZCSAT(JL)*ZCFH(JL,KLEV)*
     *               ZQDP)*ZTPFAC2*ZQS(JL)+ZFAC*ZQDIF(JL,KLEVM1))
        ZXDIF(JL,KLEV)=ZDISC*(ZXDIF(JL,KLEV)+ZFAC*ZXDIF(JL,KLEVM1))
  541 CONTINUE

C
C*    5.5     BACK-SUBSTITUTION.
C
  550 CONTINUE
 
      DO 552 JK=KLEVM1,ITOP,-1
        DO 551 JL=KIDIA,KFDIA
          ZTDIF(JL,JK)=ZTDIF(JL,JK)+ZEBSH(JL,JK)*ZTDIF(JL,JK+1)
          ZQDIF(JL,JK)=ZQDIF(JL,JK)+ZEBSH(JL,JK)*ZQDIF(JL,JK+1)
          ZXDIF(JL,JK)=ZXDIF(JL,JK)+ZEBSH(JL,JK)*ZXDIF(JL,JK+1)
  551   CONTINUE
  552 CONTINUE

C
C*    5.6     INCREMENTATION OF T AND Q TENDENCIES.
C
  560 CONTINUE

      DO 571 JK=ITOP,KLEV
        DO 561 JL=KIDIA,KFDIA
          ZQDIF(JL,JK)=ZQDIF(JL,JK)+ZTPFAC3*PQM1(JL,JK)
          ZDQDT=(ZQDIF(JL,JK)-PQM1(JL,JK))*ZCONS13
          PQTE(JL,JK)=PQTE(JL,JK)+ZDQDT
          ZTDIF(JL,JK)=ZTDIF(JL,JK)+ZTPFAC3*ZTETA1PR(JL,JK)
          ZDTDT = (ZTDIF(JL,JK)-ZTETA1PR(JL,JK))*ZCONS13
          ZDTDT = ZDTDT / (100000./PAPM1(JL,JK))**ZKAPPA
          PTTE(JL,JK)=PTTE(JL,JK)+ZDTDT
          ZXDIF(JL,JK)=ZXDIF(JL,JK)+ZTPFAC3*PXM1(JL,JK)
          ZDXMDT=(ZXDIF(JL,JK)-PXM1(JL,JK))*ZCONS13
          IF (.TRUE.) THEN 
             PXTE(JL,JK)=PXTE(JL,JK)+ZDXMDT    ! ECHAM4
            ELSE 
             PQTE(JL,JK)=PQTE(JL,JK)+ZDXMDT    ! NO LIQUID
                                               ! WATER FLUX
             PTTE(JL,JK)=PTTE(JL,JK) 
     *         - ALV/(CPD*(1.+VTMPC2*ZQDIF(JL,JK)))*ZDXMDT
          ENDIF
          ZTDIF(JL,JK) =(ZCPTGZ(JL,JK) + 
     *        CPD * (1.+VTMPC2*ZQDIF(JL,JK))* ZDTDT / ZCONS13)        
  561   CONTINUE
  571 CONTINUE

C
C*    5.8     STORAGE OF THE SURFACE HEAT (S.+L.) AND MOISTURE
C*            FLUXES AND THEIR DERIVATIVES
C*            AGAINST SURFACE VARIABLES
C
  580 CONTINUE

      DO 581 JL=KIDIA,KFDIA
        ZCOEFF=ZCONS15*ZTCOE(JL)
 
COBC    Multiplied by zqs on both sides:
        LO=(ZQS(JL)*ZHUM(JL)).LE.PQM1(JL,KLEV)
        ZHUM(JL)=CVMGT(0.,ZHUM(JL),LO)
        ZCA=CVMGT(0.,1.,LO)
        ZHUM(JL)=CVMGT(ZHUM(JL),1.,LALAND(JL))
        ZCA=CVMGT(ZCA,1.,LALAND(JL))
        LO=PQM1(JL,KLEV).GT.ZQS(JL)
        ZHUM(JL)=CVMGT(1.,ZHUM(JL),LO)
        ZCA=CVMGT(1.,ZCA,LO)
        ZHUM(JL)=(1.-PCVS(JL))*(1.-PCVW(JL))*ZHUM(JL)
        ZCA=(1.-PCVS(JL))*(1.-PCVW(JL))*ZCA
 
        ZQNLEV=ZQDIF(JL,KLEV)-ZTPFAC3*PQM1(JL,KLEV)
        ZZQS=ZTPFAC2*ZQS(JL)
        PQHFL(JL)=ZCOEFF*(ZCAIR(JL)*ZQNLEV-ZCSAT(JL)*ZZQS)
 
        ZTNLEV=ZTDIF(JL,KLEV)-ZTPFAC3*ZCPTGZ(JL,KLEV)
        ZZCPTS=ZTPFAC2*ZCPTS(JL)
        PTHFL(JL)=ZCOEFF*(ZTNLEV-ZZCPTS)
        PDHFT(JL)=-ZCONS16*PQHFL(JL)
        PTHFL(JL)=PTHFL(JL)+PTSM1M(JL)*PDHFT(JL)
 
        ZXNLEV=ZXDIF(JL,KLEV)-ZTPFAC3*PXM1(JL,KLEV)
        ZXHFL=ZCOEFF*ZXNLEV
        PRSFL(JL)=MAX(0.,ZXHFL)
        PXHFL(JL)=MIN(ZXHFL,0.)
 
        PAHFS(JL)=PAHFSM(JL)+ZDIAGT*PTHFL(JL)
        PEVAP(JL)=PEVAPM(JL)+ZDIAGW*(PQHFL(JL)+PXHFL(JL))
 
        PDHFQW(JL)=ZCOEFF*ZWLMXI(JL)*(1.-PCVS(JL))*(ZQNLEV-ZZQS)
 
        PDHFQS(JL)=ZCOEFF*(ZQNLEV-ZZQS)
 
        ZWET(JL)=ZWET(JL)-PCVS(JL)-(1.-PCVS(JL))*PCVW(JL)
        ZQHFLV=PVGRAT(JL)*ZWET(JL)*(ZQNLEV-ZZQS)
        ZQHFLB=(1.-PVGRAT(JL))*(ZCA*ZQNLEV-ZHUM(JL)*ZZQS)
        PCVGHL(JL)=CVMGT(ABS(ZQHFLV)/MAX(ZEPEVAP,ABS(ZQHFLV)+
     *                ABS(ZQHFLB)),1.,LALAND(JL))
  581 CONTINUE

C
CJCH  DHFSZ(IROW) =ZDIAGT*ZBUD*SSUM(KLON,PTHFL,1)
CJCH  DEVAPZ(IROW)=ZDIAGW*ZBUD*SSUM(KLON,PQHFL,1)
C

      DO 582 JL=KIDIA,KFDIA
        PQHFL(JL)=PQHFL(JL)-PCVS(JL)*PDHFQS(JL)
        PAHFL(JL)=ALV*PQHFL(JL)+ALS*PCVS(JL)*PDHFQS(JL)
        PTHFL(JL)=PTHFL(JL)+PAHFL(JL)
        PAHFL(JL)=PAHFLM(JL)+ZDIAGT*PAHFL(JL)
        LO=LALAND(JL).OR.PTSM1M(JL).GT.TMELT
        ZALVS=ALS*PCVS(JL)+ALV*(1.-PCVS(JL))
        ZALVS=CVMGT(ZALVS,ALS,LO)
        PDHFT(JL)=-ZTPFAC2*ZCONS15*ZTCOE(JL)*(ZCPTS(JL)/PTSM1M(JL)+
     *         (ZALVS-ZCONS16*PTSM1M(JL))*ZCSAT(JL)*ZDQS(JL))+PDHFT(JL)
  582 CONTINUE

C
C*    5.85     COMPUTATION OF BOUNDARY LAYER HEIGHT
C
      DO 585 JL=KIDIA,KFDIA
        ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
        ZRHO=PAPHM1(JL,KLEVP1)/ZRD/
     &      (PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)))
        ZSENKF(JL)=-(PAHFS(JL)-PAHFSM(JL))/(ZDIAGT*ZRHO*ZCPD)
        ZLATKF(JL)=-(ALV*PQHFL(JL)+ALS*PCVS(JL)*PDHFQS(JL))/(ZRHO*ALV)
        ZUSTAR1(JL)=((PUSTAR3(JL)-PUSTAR3M(JL))/ZDIAGT)**(1./3.)
        ZCDH(JL)=ZCFH(JL,KLEV)/(ZCONS12*SQRT(ZDU2)*ZRD*ZRHO)
        ZCDM(JL)=ZCFM(JL,KLEV)/(ZCONS12*SQRT(ZDU2)*ZRD*ZRHO)
C
C       EMPTY SOME WORKSPACE
C
        ZPBLH(JL)=0.
        ZOBUKL(JL)=0.
        ZBUOYPR(JL)=0.
  585 CONTINUE
 
      CALL EC_PBLHGHT(KLON,KLEV,KIDIA,KFDIA,
     &             ZTETA1,PQM1,PGEOM1,PUM1,PVM1,ZTESS,
     &             ZSENKF,ZLATKF,ZUSTAR1,
     &             ZCDN,ZCDH,ZCDM,
     &             ZPBLH,ZOBUKL,ZBUOYPR)
 

      DO 587 JL=KIDIA,KFDIA
        PBLH  (JL) = PBLHM  (JL) + ZDIAGT*ZPBLH  (JL)
 587  CONTINUE

C
C*    5.95  COMPUTE NEW T2MAX AND MIN
C
 595  CONTINUE
 
      DO 597 JL=KIDIA,KFDIA
        LO1=ZRICLS(JL).GE.0.
        ZRAT=ZHTQ/PGEOM1(JL,KLEV)
        ZCBN=LOG(1.+(EXP(ZBN(JL))-1.)*ZRAT)
        ZCBS=-(ZBN(JL)-ZBH(JL))*ZRAT
        ZCBU=-LOG(1.+(EXP(ZBN(JL)-ZBH(JL))-1.)*ZRAT)
        ZRED=(ZCBN+CVMGT(ZCBS,ZCBU,LO1))/ZBH(JL)
        ZH2M=ZCPTS(JL)+ZRED*(ZCPTGZ(JL,KLEV)-ZCPTS(JL))
        ZT2=(ZH2M-ZHTQ)/(CPD*(1.+VTMPC2*PQM1(JL,KLEV)))
        PTEMP2(JL)=PTEMP2M(JL)+ZDIAGT*ZT2
        PT2MAX(JL)=MAX(PT2MAXM(JL),ZT2)
        PT2MIN(JL)=MIN(PT2MINM(JL),ZT2)
C
C*      5.96   2M DEW POINT
C

CGEERT  interpolation relative humidity from nlev to 2 meter
        IT=PTM1(JL,KLEV)*1000.
        ZQS1=TLUCUA(IT)/PAPM1(JL,KLEV)
        ZQS1=ZQS1/(1.-VTMPC1*ZQS1)
        ZRH2M=MAX(ZEPHUM,PQM1(JL,KLEV)/ZQS1)
 
        LO=ZT2.GT.TMELT
        ZCVM3=CVMGT(C3LES,C3IES,LO)
        ZCVM4=CVMGT(C4LES,C4IES,LO)
        ZAPH2M=PAPHM1(JL,KLEVP1)*
     *       (1.-ZHTQ/(RD*ZT2*(1.+VTMPC1*PQM1(JL,KLEV))))
        IT=ZT2*1000.
        ZQS2=TLUCUA(IT)/ZAPH2M
        ZQS2=ZQS2/(1.-VTMPC1*ZQS2)
        ZQ2M=ZRH2M*ZQS2

cgeert  simple linear interpolation
        ZQV_SURF   = ZCSAT(JL)*ZQS(JL)+(1.-ZCAIR(JL))*PQM1(JL,KLEV)
        ZQ2M = (ZQV_SURF  + PQM1(JL,KLEV))/2.

CGEERT  more advanced interpolation
        ZQ2M= ZQV_SURF + ZRED*(PQM1(JL,KLEV)-ZQV_SURF)
       

        ZFRAC=LOG(ZAPH2M*ZQ2M/(C2ES*(1.+VTMPC1*ZQ2M)))/ZCVM3
        PDEW2(JL)=PDEW2M(JL)+ZDIAGT*MIN(ZT2,(TMELT-ZFRAC*ZCVM4)
     *                          /(1.-ZFRAC))
C
C*      5.97   10M WIND COMPONENTS, MAX 10M WINDSPEED
C
        ZRAT=ZHUV/PGEOM1(JL,KLEV)
        ZCBN=LOG(1.+(EXP(ZBN(JL))-1.)*ZRAT)
        ZCBS=-(ZBN(JL)-ZBM(JL))*ZRAT
        ZCBU=-LOG(1.+(EXP(ZBN(JL)-ZBM(JL))-1.)*ZRAT)
        ZRED=(ZCBN+CVMGT(ZCBS,ZCBU,LO1))/ZBM(JL)
        ZU10=ZRED*PUM1(JL,KLEV)
        ZV10=ZRED*PVM1(JL,KLEV)
        ZSPEED=SQRT(ZU10**2+ZV10**2)
        PU10(JL)=PU10M(JL)+ZDIAGT*ZU10
        PV10(JL)=PV10M(JL)+ZDIAGT*ZV10
        PWIMAX(JL)=MAX(PWIMAXM(JL),ZSPEED)
        PWIND10(JL)=PWIND10M(JL)+ZDIAGT*ZSPEED
  597 CONTINUE


C=============================================================
CEVM  --------------------------------------------------------
C     IF *LSRFFLUX_READ* = .TRUE. READ THE SURFACE FLUXES
C     FOR SENSIBLE AND LATENT HEAT IN *INIFLUX*
C
      IF (LSRFFLUX_READ) THEN
        IF (LSURF) THEN
C
C       PUT LSURF TO FALSE
C
          LSURF = .FALSE.
	  WRITE (0,'(A)') ' LSURF PUT TO .FALSE. IN *EC4_VDIFF* '
        END IF
C
C       ----------------------------------------------
C       PUT DRAG COEFFICIENT REQUIRED TO DETERMINE
C       SURFACE TEMPERATURE AT NEXT TIME STEP INTO *ZCFQSRF*
C       IF  WRIH<=1. (  STABLE)  THEN ZCFHSRF = ZCDN
C       IF  WRIH> 1. (UNSTABLE)  THEN ZCFHSRF = ZCDN*WRIH
C
	DO 333 JL=KIDIA,KFDIA
	  IF (WRIH(JL).GT.1.) THEN
	    ZCFHSRF(JL)=ZCDN(JL)*WRIH(JL)
          ELSE
	    ZCFHSRF(JL)=ZCDN(JL)
          END IF
 333    CONTINUE
C
	IRFLX1=1
	IRFLX0=1
        IF (NSTEP.EQ.0) IRFLX0=0
	DO IRFL=IRFLX0,IRFLX1
C
            CALL INIFLUX(
     +       NUNINFLX,      ! nuninflx,
     +       KLON   ,       ! nhor,
     +       KLEV   ,       ! nlev,
     +       KIDIA  ,       ! kstart,
     +       KFDIA  ,       ! kstop,
     +       NSTEP+I,       ! nstep,
     +       NSTOP  ,       ! nstop,
     +       TWODT  ,       ! twodt,
     +       LTS_OBS,       ! ltsobs,
     +       CREFLUX,       ! creflux,
C
     +       PTM1   ,       ! t,
     +       PQM1   ,       ! q,
     +       PUM1   ,       ! u,
     +       PVM1   ,       ! v,
     +       PGEOM1 ,       ! gpot,
     +       ZDPH   ,       ! dph,
     +       APZERO ,       ! apzero,
     +       PAPHM1 ,       ! pres,
C
     +       LALAND ,       ! loland,
C
     +       PTSM1M ,       ! tsold, current surface temp!!
     +       PTSM   ,       ! tsobs, new calculated surf. temp.
     +       PWSM1M ,       ! wsold, current surface moisture
     +       PWSM   ,       ! wsupd,    "
C
     +       ZSENKF ,       ! senf,
     +       ZLATKF ,       ! latf,
     +       ZCFHSRF,       ! cdragh,
     +       ZCFHSRF        ! cdragh,
C
     +       )

        ENDDO 
C
C     DETERMINE AND T_SURF FOR THE NEXT TIMESTEP
C       &
C     DETERMINE BETA*Q_SURF FOR THE NEXT TIMESTEP
C
      DO 335 JL=KIDIA,KFDIA
        ZCFH(JL,KLEV)=ZCFH(JL,KLEV)/(ZTPFAC1*ZTMST*G)
        LO=LALAND(JL).OR.PTSM1M(JL).GT.ZTMELT
        ZALVS=ALS*PCVS(JL)+ALV*(1.-PCVS(JL))
        ZALVS=CVMGT(ZALVS,ALS,LO)
	ZCPCOR     = ZLATKF(JL)*PTSM1M(JL)*ZCPD*VTMPC2/ZALVS
	ZSENKF(JL) = ZSENKF(JL) + ZCPCOR
	ZS0 = ZTPFAC1*ZTDIF(JL,KLEV) + (1.-ZTPFAC1)*ZCPTGZ(JL,KLEV)
     +      -  ZSENKF(JL)/ZCFH(JL,KLEV)
	ZQ0 = ZTPFAC1*ZQDIF(JL,KLEV)+(1.-ZTPFAC1)*PQM1(JL,KLEV)
     +      - ZLATKF(JL)/ZCFH(JL,KLEV)/ZALVS
	PTSM(JL)=ZS0/(ZCPD*(1+VTMPC2*ZQ0))
C
        LO1=(PTSM1M(JL)-PTMELT).GT.0.
        ZCVM3=CVMGT(C3LES,C3IES,LO1)
        ZCVM4=CVMGT(C4LES,C4IES,LO1)
        ZCVM5=CVMGT(C5LES,C5IES,LO1)
        IT=PTSM1M(JL)*1000.
	ZQS(JL)=TLUCUA(IT)/PAPHM1(JL,KLEVP1)
        ZQS(JL)=ZQS(JL)/(1.-VTMPC1*ZQS(JL))
	ZBETA(JL)=
     +   (ZQ0    - ZTPFAC1*ZQDIF(JL,KLEV)-(1.-ZTPFAC1)*PQM1(JL,KLEV))
     +  /(ZQS(JL)- ZTPFAC1*ZQDIF(JL,KLEV)-(1.-ZTPFAC1)*PQM1(JL,KLEV))
 335  CONTINUE
C
CEVM-----------------------------------------------------------------
C
C*         5.83     REDETERMINE SURFACE FLUXES FROM OBSERVED VALUES
C
C       DO 583 JL=KIDIA,KFDIA
C         AHFS(JL)=AHFSM(JL)+ZSENKF(JL)*ZDIAGT
C         AHFL(JL)=AHFLM(JL)+ZLATKF(JL)*ZDIAGT
C         DHFT(JL)=0.
C         DHFQ(JL)=0.
C         DHFQW(JL)=0.
C         DHFQS(JL)=0.
C583    CONTINUE
C     ENDIF (LSRFFLUX_READ)
CEVM-----------------------------------------------------------------
CEVM-----------------------------------------------------------------
      ENDIF
C=============================================================
CEVM----------------------------------------------------------------


C
C     ------------------------------------------------------------------
C
C*    6.     NECESSARY COMPUTATIONS IF SUBROUTINE IS BY-PASSED
C*           (geert LVDIF = false)
C            --------- ------------ -- ---------- -- ----------
C
  600 CONTINUE

C***
      ELSE         
C***

      DO  601 JL=KIDIA,KFDIA
        PAZ0(JL)=PAZ0M(JL)
        PCVGHL(JL)=0.
        PVDIS(JL)=PVDISM(JL)
        PUSTR(JL)=PUSTRM(JL)
        PVSTR(JL)=PVSTRM(JL)
        PAHFS(JL)=PAHFSM(JL)
        PAHFL(JL)=PAHFLM(JL)
        PEVAP(JL)=PEVAPM(JL)
        PTHFL(JL)=0.
        PDHFT(JL)=0.
        PQHFL(JL)=0.
        PXHFL(JL)=0.
        PDHFQW(JL)=0.
        PDHFQS(JL)=0.
        PRSFL(JL)=0.
        PTEMP2(JL)=PTEMP2M(JL)
        PT2MAX(JL)=PT2MAXM(JL)
        PT2MIN(JL)=PT2MINM(JL)
        PDEW2(JL)=PDEW2M(JL)
        PU10(JL)=PU10M(JL)
        PV10(JL)=PV10M(JL)
        PWIND10(JL)=PWIND10M(JL)
        PUSTAR3(JL)=PUSTAR3M(JL)
        PWIMAX(JL)=PWIMAXM(JL)
  601 CONTINUE
C     DVDISZ(IROW)=0.
C     DHFSZ(IROW)=0.
C     DEVAPZ(IROW)=0.

C***
      END IF
C***

      RETURN
      END

     
