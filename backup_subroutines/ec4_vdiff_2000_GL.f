#if defined(CVX)
      options -re -O2
#endif
      SUBROUTINE EC4_VDIFF ( KIDIA,KFDIA,KLON,KLP2,KTDIA,KLEV,KLEVM1
     *                 , KLEVP1
     *                 , CONACC
     *                 , NSTEP,NSTART,TWODT,EPS
     *                 , LVDIFF
cjhc *                 , KTRAC
C-----------------------------------------------------------------------
C - INPUT 3D .
cjhc *       , PXTM1
C - INPUT 2D .
     *       , PACLCM,   PAPHM1,   PAPM1,   PGEOM1,  PQM1,    PTKEM
#ifdef EVM
     *       , PTKEM1M,  PTM1,     PUM1,    PVM1,    PXM1,    PTVM1
#else
     *       , PTKEM1M,  PTM1,     PUM1,    PVM1,    PXM1
#endif
C - INPUT 1D .
     *       , LALAND
     *       , PAHFLM,   PAHFSM,   PAZ0M,   PDEW2M,  PEVAPM,  PFORESTM
     *       , PSEAICE,  PSNM1M,   PSRFL,   PTEMP2M, PTSM1M,  PT2MAXM
     *       , PT2MINM,  PUSTAR3M, PUSTRM,  PU10M,   PVDISM,  PVSTRM
     *       , PV10M,    PWIMAXM,  PWIND10M,PWLM1M,  PWSM1M
     *       , PWSMXM,   PVLTM
#ifdef EVM
     *       , PBLHM,    PTKEVIM
#endif
C - INPUT 1D LAM SPECIFIC
     *       , PSINLAT
C - OUTPUT 2D .
     *       , PTKE,     PTKEM1
C - OUTPUT 1D .
cjhc *       , KTROPO
     *       , PAHFL,    PAHFS,    PAZ0,    PCVGHL,  PCVS,    PCVW
     *       , PDEW2,    PDHFQS,   PDHFQW,  PDHFT,   PEVAP
     *       , PQHFL,    PRSFL,    PTEMP2,  PTHFL,   PT2MAX,  PT2MIN
     *       , PUSTAR3,  PUSTR,    PU10,    PVDIS,   PVSTR,   PV10
     *       , PWIMAX,   PWLMX,    PWIND10, PXHFL
#ifdef EVM
     *       , PBLH,     PTKEVI
#endif
C - INPUT/OUTPUT 3D .
cjhc *       , PXTTE
C - INPUT/OUTPUT 2D .
     *       , PVOL,     PVOM,     PQTE,     PTTE,     PXTE
C - INPUT/OUTPUT 1D .
     *       , PVGRAT )
C
C**** *VDIFF* - DOES THE VERTICAL EXCHANGE OF U,V,T,Q BY TURBULENCE.
C
C
C     SUBJECT.
C     --------
C
C          THIS ROUTINE COMPUTES THE PHYSICAL TENDENCIES OF THE FOUR
C     PROGNOSTIC VARIABLES U,V,T AND Q DUE TO THE VERTICAL EXCHANGE BY
C     TURBULENT (= NON-MOIST CONVECTIVE) PROCESSES. THESE TENDENCIES ARE
C     OBTAINED AS THE DIFFERENCE BETWEEN THE RESULT OF AN IMPLICIT
C     TIME-STEP STARTING FROM VALUES AT T-1 AND THESE T-1 VALUES. ALL
C     THE DIAGNOSTIC COMPUTATIONS (EXCHANGE COEFFICIENTS, ...) ARE DONE
C     FROM THE T-1 VALUES. AS A BY-PRODUCT THE ROUGHNESS LENGTH OVER SEA
C     IS UPDATED ACCORDINGLY TO THE *CHARNOCK FORMULA. HEAT AND MOISTURE
C     SURFACE FLUXES AND THEIR DERIVATIVES AGAINST TS, WS AND WL
C     (THE LATTER WILL BE LATER WEIGHTED WITH THE SNOW FACTOR IN
C     *VDIFF*), LATER TO BE USED FOR SOIL PROCESSES TREATMENT, ARE ALSO
C     COMPUTED AS WELL AS A STABILITY VALUE TO BE USED AS A DIAGNOSTIC
C     OF THE DEPTH OF THE WELL MIXED LAYER IN CONVECTIVE COMPUTATIONS.
C
C**   INTERFACE.
C     ----------
C
C          *VDIFF* IS CALLED FROM *PHYSC*.
C
C     INPUT ARGUMENTS.
C     ----- ----------
C
C  - 3D
C  PXTM1    : TRACER VARIABLES (T-DT)
C  - 2D
C  PACLCM   : CLOUD COVER (OLD VALUE)
C  PAPHM1   : HALF LEVEL PRESSURE (T-DT)
C  PAPM1    : FULL LEVEL PRESSURE (T-DT)
C  PGEOM1   : GEOPOTENTIAL ABOVE SURFACE (T-DT)
C  PQM1     : HUMIDITY (T-DT)
C  PTKEM    : TURBULENT KINETIC ENERGY
C  PTKEM1M  : TURBULENT KINETIC ENERGY (T-DT)
C  PTM1     : TEMPERATURE (T-DT)
C  PUM1     : ZONAL WIND (T-DT)
C  PVM1     : MERIDIONAL WIND (T-DT)
C  PXM1     : CLOUD WATER (T-DT)
C  - 1D
C  LALAND   : LAND-SEA FLAG
C  PAHFLM   : SURFACE LATENT HEAT FLUX (OLD VALUE)
C  PAHFSM   : SURFACE SENSIBLE HEAT FLUX (OLD VALUE)
C  PAZ0M    : ROUGHNESS LENGTH (OLD VALUE)
C  PDEW2M   : DEW POINT TEMPERATURE AT 2 METER (ACCUMULATED, OLD VALUE)
C  PEVAPM   : SURFACE EVAPORATION (ACCUMULATED, OLD VALUE)
C  PEFORESTM: FOREST COVERAGE
C  PSEAICE  : SEA ICE COVER (NEW VALUE)
C  PSNM1M   : SNOW DEPTH (T-DT)
C  PSRFL    : NET SOLAR RADIATIVE FLUX AT THE SURFACE
C  PTEMP2M  : TEMPERATURE AT 2 METER (ACCUMULATED, OLD VALUE)
C  PTSM1M   : SURFACE TEMPERATURE (T-DT)
#ifdef EVM
C  PTVM1    : VIRTUAL TEMPERATURE AT T-DT
#endif
C  PT2MAXM  : MAXIMUM TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (OLD VALUE)
C  PT2MINM  : MINIMUN TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (OLD VALUE)
C  PUSTAR3M : TKE FOR OCEAN MIXED LAYER (ACCUMULATED, OLD VALUE)
C  PUSTRM   : U-STRESS (ACCUMULATED, OLD VALUE)
C  PVSTRM   : V-STRESS (ACCUMULATED, OLD VALUE)
C  PU10M    : U-WIND AT 10 METER (ACCUMULATED, OLD VALUE)
C  PV10M    : V-WIND AT 10 METER (ACCUMULATED, OLD VALUE)
C  PWIND10M : WIND SPEED AT 10 METER (ACCUMULATED, OLD VALUE)
C  PWIMAXM  : MAXIMUM WINDSPEED AT 10 M. BETW. OUTP. INTERV. (OLD VALUE)
C  PVDISM   : BOUNDARY LAYER DISSIPATION (ACCUMULATED, OLD VALUE)
C  PWLM1M   : SKIN RESERVOIR CONTENT (T-DT)
C  PWSM1M   : SURFACE SOIL WETNESS (T-DT)
C  PWSMXM   : FIELD CAPACITY OF SOIL
C  PVLTM    : LEAF AREA INDEX
#ifdef EVM
C  PBLHM    : PLANETARY BOUNDARY LAYER HEIGHT (HOLTSLAG ET AL.)
C  PTKEVIM  : VERTICALLY INTEGRATED TURBULENT KINETIC ENERGY 
#endif
C
C     OUTPUT ARGUMENTS.
C     ------ ----------
C
C  - 2D
C  PTKE     : TURBULENT KINETIC ENERGY (T+DT)
C  PTKEM1   : TURBULENT KINETIC ENERGY (FILTERED)
C  - 1D
C  KTROPO   : TROPOPAUSE INDEX
C  PAHFL    : SURFACE LATENT HEAT FLUX (NEW VALUE)
C  PAHFS    : SURFACE SENSIBLE HEAT FLUX (NEW VALUE)
C  PAZ0     : ROUGHNESS LENGTH (NEW VALUE)
C  PCVGHL   : RATIO OF MOISTURE FLUXES
C  PCVS     : SNOW COVER FRACTION
C  PCVW     : WET SKIN FRACTION
C  PDEW2    : DEW POINT TEMPERATURE AT 2 METER (ACCUMULATED, NEW VALUE)
C  PDHFQS   : DERIVITAVE OF MOISTURE FLUX OVER SNOW WITH RESP. TO SNOW D
C  PDHFQW   : DERIVITAVE OF MOISTURE FLUX WITH RESPECT TO SKIN RESERVOIR
C  PDHFT    : DERIVITAVE OF SENSIBLE HEAT FLUX WITH RESP. TO SURF. TEMP.
C  PEVAP    : SURFACE EVAPORATION (ACCUMULATED, NEW VALUE)
C  PQHFL    : MOISTURE FLUX AT THE SURFACE
C  PRSFL    : LARGE SCALE RAIN FLUX AT THE SURFACE
C  PTHFL    : SENSIBLE HEAT FLUX AT THE SURFACE
C  PXHFL    : LIQUID WATER FLUX AT THE SURFACE
C  PTEMP2   : TEMPERATURE AT 2 METER (ACCUMULATED, NEW VALUE)
C  PT2MAX   : MAXIMUM TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (NEW VALUE)
C  PT2MIN   : MINIMUN TEMP. AT 2 M. BETWEEN OUTPUT INTERVALS (NEW VALUE)
C  PUSTAR3  : TKE FOR OCEAN MIXED LAYER (ACCUMULATED, NEW VALUE)
C  PUSTR    : U-STRESS (ACCUMULATED, NEW VALUE)
C  PVSTR    : V-STRESS (ACCUMULATED, NEW VALUE)
C  PU10     : U-WIND AT 10 METER (ACCUMULATED, NEW VALUE)
C  PV10     : V-WIND AT 10 METER (ACCUMULATED, NEW VALUE)
C  PVDIS    : BOUNDARY LAYER DISSIPATION (ACCUMULATED, NEW VALUE)
C  PWIMAX   : MAXIMUM WINDSPEED AT 10 M. BETW. OUTP. INTERV. (NEW VALUE)
C  PWLMX    : MAXIMUM SKIN RESERVOIR CONTNET
C  PWIND10  : WIND SPEED AT 10 METER (ACCUMULATED, NEW VALUE)
#ifdef EVM
C  PBLH     : PLANETARY BOUNDARY LAYER HEIGHT (HOLTSLAG ET AL.)
C  PTKEVI   : VERTICALLY INTEGRATED TURBULENT KINETIC ENERGY
#endif
C
C     INPUT/OUTPUT ARGUMENTS.
C     -----------------------
C
C  - 3D
C  PXTTE    : TENDENCIES OF TRACER VARIABLES
C  - 2D
C  PVOL     : TENDENCY OF MERIDIONAL WIND
C  PVOM     : TENDENCY OF ZONAL WIND
C  PQTE     : TENDENCY OF HUMIDITY
C  PTTE     : TENDENCY OF TEMPERATURE
C  PXTE     : TENDENCY OF CLOUD WATER
C  - 1D
C  PVGRAT   : VEGETATION RATIO
C
C
C     METHOD.
C     -------
C
C          FIRST AN AUXIALIARY VARIABLE CP(Q)T+GZ IS CREATED ON WHICH
C     THE VERTICAL DIFFUSION PROCESS WILL WORK LIKE ON U,V AND Q. THEN
C     ALONG THE VERTICAL AND AT THE SURFACE, EXCHANGE COEFFICIENTS (WITH
C     THE DIMENSION OF A PRESSURE THICKNESS) ARE COMPUTED FOR MOMENTUM
C     AND FOR HEAT (SENSIBLE PLUS LATENT). THE LETTERS M AND H ARE USED
C     TO DISTINGUISH THEM. THE DIFFUSIONCOEFFICENTS DEPEND ON THE
C     TURBULENT KINETIC ENERGY (TKE) CALCULATED BY AN ADDITIONAL
C     PROGNOSTIC EQUATION, WHICH CONSIDERS ADVEKTION OF TKE.
C          IN THE SECOND PART OF THE ROUTINE THE IMPLICIT LINEAR
C     SYSTEMS FOR U,V FIRST AND T,Q SECOND ARE SOLVED BY A *GAUSSIAN
C     ELIMINATION BACK-SUBSTITUTION METHOD. FOR T AND Q THE LOWER
C     BOUNDARY CONDITION DEPENDS ON THE SURFACE STATE.
C     FOR TKE THE LOWER BOUNDARY CONDITION DEPENDS ON THE SQUARE OF
C     THE FRICTIONAL VELOCITY.
C     OVER LAND, TWO DIFFERENT REGIMES OF EVAPORATION PREVAIL:
C     A STOMATAL RESISTANCE DEPENDENT ONE OVER THE VEGETATED PART
C     AND A SOIL RELATIVE HUMIDITY DEPENDENT ONE OVER THE
C     BARE SOIL PART OF THE GRID MESH.
C     POTENTIAL EVAPORATION TAKES PLACE OVER THE SEA, THE SNOW
C     COVERED PART AND THE LIQUID WATER COVERED PART OF THE
C     GRID MESH AS WELL AS IN CASE OF DEW DEPOSITION.
C          FINALLY ONE RETURNS TO THE VARIABLE TEMPERATURE TO COMPUTE
C     ITS TENDENCY AND THE LATER IS MODIFIED BY THE DISSIPATION'S EFFECT
C     (ONE ASSUMES NO STORAGE IN THE TURBULENT KINETIC ENERGY RANGE) AND
C     THE EFFECT OF MOISTURE DIFFUSION ON CP. Z0 IS UPDATED AND THE
C     SURFACE FLUXES OF T AND Q AND THEIR DERIVATIVES ARE PREPARED AND
C     STORED LIKE THE DIFFERENCE BETWEEN THE IMPLICITELY OBTAINED
C     CP(Q)T+GZ AND CP(Q)T AT THE SURFACE.
C
C     EXTERNALS.
C     ----------
C   ....
C
C     REFERENCE.
C     ----------
C
C          SEE VERTICAL DIFFUSION'S PART OF THE MODEL'S DOCUMENTATION
C     FOR DETAILS ABOUT THE MATHEMATICS OF THIS ROUTINE.
C
C     AUTHOR.
C     -------
C     U. SCHLESE     DKRZ-HAMBURG  FEB-93
C       MODIFIED     E. ROECKNER  - 1994
C
C     BASED  ON  ORIGINAL ECMWF VERSION BY J.F. GELEYN  - 1982
C                              MODIFIED BY C.B. BLONDIN - 1986
C                                          H. FEICHTER  - 1991
C                                          S. BRINKOP   - 1992
C                                          M. CLAUSSEN  - 1993
C
C     MODIFICATIONS.
C     --------------
C
cjhc*CALL PARAM
cjhc*CALL COMCTL
cjhc*CALL COMGAU
cjhc*CALL COMDIAZ
cjhc*CALL COMPSW
cjhc*CALL COMPH2
cjhc*CALL COMCON
cjhc*CALL COMSDS
cjhc*CALL COMVEG
cjhc*CALL COMTRC
cjhc*CALL YOTLUC
#include "comcon.inc"
#include "comph2.inc"
#include "comveg.inc"
#include "comevm.inc"
#include "yotluc.inc"
C     ---------------------------------
      LOGICAL LO,LO1
#ifdef C90 
CDIR$ VFUNCTION EXPHF, SQRTHF
*vdir vectfunc (sqrthf)
CDIR$ VFUNCTION ALOGHF
#endif
C     ----------------
C
cjch      INTEGER KTROPO(KLON)
      LOGICAL LALAND(KLP2) ,LVDIFF
cjch      REAL PXTM1(KLON,KLEV,KTRAC)
      REAL PACLCM(KLP2,KLEV),  PAPHM1(KLP2,KLEVP1), PAPM1(KLP2,KLEV)
     *    ,PGEOM1(KLP2,KLEV),  PQM1(KLP2,KLEV),     PTKEM(KLP2,KLEV)
     *    ,PTKEM1M(KLP2,KLEV), PTM1(KLP2,KLEV),     PUM1(KLP2,KLEV)
#ifdef EVM
     *    ,PVM1(KLP2,KLEV),    PXM1(KLP2,KLEV),     PTVM1(KLON,KLEV)
#else
     *    ,PVM1(KLP2,KLEV),    PXM1(KLP2,KLEV)
#endif
      REAL PAHFLM(KLP2),       PAHFSM(KLP2),        PAZ0M(KLP2)
     *    ,PDEW2M(KLP2),       PEVAPM(KLP2),        PFORESTM(KLP2)
     *    ,PSEAICE(KLP2),      PSNM1M(KLP2),        PSRFL(KLP2)
     *    ,PTEMP2M(KLP2),      PTSM1M(KLP2),        PT2MAXM(KLP2)
     *    ,PT2MINM(KLP2),      PUSTAR3M(KLP2),      PUSTRM(KLP2)
     *    ,PU10M(KLP2),        PVDISM(KLP2),        PVSTRM(KLP2)
     *    ,PV10M(KLP2),        PWIMAXM(KLP2),       PWIND10M(KLP2)
     *    ,PWLM1M(KLP2),       PWSM1M(KLP2),        PWSMXM(KLP2)
     *    ,PVLTM(KLP2) ,       PSINLAT(KLP2)
#ifdef EVM
     *    ,PBLHM(KLP2),        PTKEVIM(KLP2)
#endif
      REAL PTKE(KLP2,KLEV),    PTKEM1(KLP2,KLEV)
      REAL PAHFL(KLP2),        PAHFS(KLP2),         PAZ0(KLP2)
     *    ,PCVGHL(KLP2),       PCVS(KLP2),          PCVW(KLP2)
     *    ,PDEW2(KLP2),        PDHFQS(KLP2)
     *    ,PDHFQW(KLP2),       PDHFT(KLP2),         PEVAP(KLP2)
     *    ,PQHFL(KLP2),        PRSFL(KLP2),         PTEMP2(KLP2)
     *    ,PTHFL(KLP2),        PT2MAX(KLP2),        PT2MIN(KLP2)
     *    ,PUSTAR3(KLP2),      PUSTR(KLP2),         PU10(KLP2)
     *    ,PVDIS(KLP2),        PVSTR(KLP2),         PV10(KLP2)
     *    ,PWIMAX(KLP2),       PWLMX(KLP2),         PWIND10(KLP2)
     *    ,PXHFL(KLP2)
#ifdef EVM
     *    ,PBLH(KLP2),         PTKEVI(KLP2)
#endif
cjch      REAL PXTTE(KLON,KLEV,KTRAC)
      REAL PVOL(KLP2,KLEV),    PVOM(KLP2,KLEV),     PQTE(KLP2,KLEV)
     *    ,PTTE(KLP2,KLEV),    PXTE(KLP2,KLEV)
      REAL PVGRAT(KLP2)
C
C     TEMPORARY ARRAYS
C
cjch      REAL ZXTDIF(KLON,KLEV,KTRAC), ZXTEMS(KLON,KTRAC)
      REAL ZCFM(KLON,KLEV),    ZDIS(KLON,KLEV)
     *    ,ZCFH(KLON,KLEV),    ZCPTGZ(KLON,KLEV),   ZEBSM(KLON,KLEV)
     *    ,ZUDIF(KLON,KLEV),   ZVDIF(KLON,KLEV)
     *    ,ZWET(KLON),         ZQS(KLON),           ZDQS(KLON)
     *    ,ZCPTS(KLON),        ZTVS(KLON),          ZRI(KLON)
     *    ,ZUCF(KLON),         ZSCF(KLON),          ZCFNC(KLON)
     *    ,ZCDN(KLON),         ZTCOE(KLON),         ZWLMXI(KLON)
      REAL ZCR(KLON),          ZRS0(KLON),          ZHUM(KLON)
     *    ,ZCSAT(KLON),        ZCAIR(KLON),         ZTDIF(KLON,KLEV)
     *    ,ZQDIF(KLON,KLEV),   ZEBSH(KLON,KLEV),    ZVIDIS(KLON)
     *    ,Z1MXTM1(KLON)
      REAL ZBN(KLON),          ZBM(KLON),           ZBH(KLON)
     *    ,ZCHN(KLON),  ZCH(KLON),  ZUSTAR(KLON), ZWST(KLON)
     *    ,ZRICLS(KLON), ZTESS(KLON), ZCFNCH(KLON)
     *    ,ZHSOIL(KLON)
     *    ,ZHDYN(KLON),        ZTETA1(KLON,KLEV),   ZLTETA1(KLON,KLEV)
     *    ,ZTVIR1(KLON,KLEV),  ZHH(KLON,KLEVM1),    ZQSS(KLON,KLEV)
     *    ,ZXDIF(KLON,KLEV),   ZEDIF(KLON,KLEV),    ZTKEVN(KLON,KLEV)
      REAL ZQSSM(KLON,KLEVM1),ZTMITTE(KLON,KLEVM1),ZTVIRMIT(KLON,KLEVM1)
     *    ,ZFAXEN(KLON,KLEVM1),ZFAXE(KLON,KLEV),    ZCCOVER(KLON,KLEVM1)
     *    ,ZLWCMIT(KLON,KLEVM1),ZTEMIT(KLON,KLEVM1),ZQMIT(KLON,KLEVM1)
     *    ,ZCDUM(KLON,KLEV)
#ifdef EVM
      REAL ZSENKF (KLON),       ZLATKF (KLON),      ZUSTAR1(KLON)
     *    ,ZCDH(KLON)   ,       ZCDM   (KLON)
     *    ,ZPBLH  (KLON),       ZOBUKL (KLON),      ZBUOYPR(KLON)
#endif
CGL...
      REAL  ZGBUOY(KLON,KLEV), ZGSHEAR(KLON,KLEV), ZGRI(KLON,KLEV)
     *     ,ZMIXDWH(KLON, KLEVP1), ZMIXUPH(KLON, KLEVP1)          
     *     ,ZMIXDWM(KLON, KLEVP1), ZMIXUPM(KLON, KLEVP1)
     *     ,ZMIXQUADH(KLON,KLEVP1),ZMIXQUADM(KLON,KLEVP1)
     *     ,ZGMONIN(KLON), ZGWST(KLON)
CGL...
      INTEGER IHPBL(KLON),     IHPBLC(KLON),        IHPBLD(KLON)
C ------------------------------------------------
C
C*    PHYSICAL CONSTANTS.
C     -------- ----------
C
C          *ZLAM* IS THE ASYMPTOTIC MIXING LENGTH FOR MOMENTUM EXCHANGE,
C     *ZKAP* IS THE VON KARMAN CONSTANT, *ZB*, *ZC* AND *ZD* ARE SOME
C     CONSTANTS FOR THE FORMULAE ABOUT STABILITY DEPENDENCY RESPECTIVELY
C     NEAR THE NEUTRAL CASE, IN THE UNSTABLE CASE AND IN THE STABLE
C     CASE AND *ZCHAR* IS THE CONSTANT OF THE *CHARNOCK FORMULA.
C     *ZQWSSAT* AND *ZQSNCR* ARE THE INVERSES OF CRITICAL VALUES FOR
C     SOIL WATER AND SNOW DEPTH THAT ARE USED IN THE COMPUTATION OF THE
C     EVAPOTRANSPIRATION'S EFFICIENCY.
C
C
C
      ZLAM=CLAM
      ZKAP=CKAP
      ZB=CB
      ZC=CC
      ZD=CD
      IF (LFRICHSTAB_ECMWF) ZD = 1.
      ZCHAR=CCHAR
      ZVA=CVA
      ZVB=CVB
      ZVC=CVC
      ZVBC=CVBC
      ZVK=CVK
      ZVKC=CVKC
      ZVABC=CVABC
      ZVRAD=CVRAD
      ZWLMAX=CWLMAX
      ZQSNCR=CQSNCR
      ZDA1=15.0
      ZUSTF=3.75
      ZWSTF=0.2
      ZTKEMIN=1.E-4
      ZTMELT=TMELT
      ZRVRD=VTMPC1+1.
      ZRDRV=1./ZRVRD
C
      ZCPD=CPD
      ZRD=RD
      ZKAPPA=ZRD/ZCPD
      ZC3LES=C3LES
      ZC3IES=C3IES
      ZC4LES=C4LES
      ZC4IES=C4IES
C
C*      PARAMETERS FOR BOUNDARY LAYER DIAGNOSTICS
C       ---------- --- -------- ----- -----------
C
      ZHUV=10.*G
      ZHTQ=2.*G
      ZEPHUM=5.E-2
      ZRHOS=RHOH2O*1.025
C
C
C*    SECURITY PARAMETERS.
C     --------------------
C
C     ZEPDU2 IS A MINIMUM SQUARED WIND INCREMENT TO AVOID DIVIDING BY
C     ZERO IN THE *RICHARDSON NUMBER'S CALCULATION AND ZEPZZO IS A
C     MINIMUM ROUGHNESS LENGTH.
C
      ZEPDU2=0.1
      ZEPZZO=1.5E-05
      ZEPZ0O=2.
      ZEPCOR=5.E-05
C
C     ZEPSW IS THE MINIMUM RELATIVE HUMIDITY OF THE GROUND,
C     ZEPSR IS A MINIMUM VALUE FOR THE RADIATION IN THE
C     VISIBLE PART OF THE SPECTRUM USED TO COMPUTE THE
C     CANOPY RESISTANCE.
C
      ZEPSW=1.E-3
      ZEPSR=1.E-10
C
C     ZEPEVAP IS THE MINIMUM ATMOSPHERIC DEMAND
C
      ZEPEVAP=1.E-10
C
C
C     ZEPSEC IS A MINIMUM VALUE FOR THE DRAG COEFFICIENT
C
      ZEPSEC=1.E-2
C
C*    COMPUTATIONAL CONSTANTS.
C     ------------- ----------
C
      ZTMST=TWODT
      IF (NSTEP.EQ.NSTART) ZTMST=0.5*TWODT
      ZDIAGT=CONACC*TWODT
      ZDIAGW=ZDIAGT/RHOH2O
C
      ZTPFAC1=CVDIFTS
      ZTPFAC2=1./ZTPFAC1
      ZTPFAC3=1.-ZTPFAC2
      ZTPFAC4=1.+ZTPFAC3
C
      ZZZLAM=30.
      ZCONS2=0.5*ZKAP/G
      ZCONS3=ZLAM
      ZCONS5=3.*ZB*ZC*G**2
      ZCONS6=1./3.
      ZCONS8=2.*ZB
      ZCONS9=3.*ZB
      ZCONS10=1./CPD
      ZCONS11=3.*ZB*ZC
      ZCONS12=ZTPFAC1*ZTMST*G/RD
      ZCONS13=1./ZTMST
      ZCONS14=ZCHAR*RD/(G**2*ZTMST)
      ZCONS15=1./(G*ZTMST)
      ZCONS16=CPD*VTMPC2
      ZCONS18=ZTPFAC1*ZTMST*G**2
      ZCONS17=1./ZKAP**2
      ZCONS25=ZCONS2/ZCONS3
C
      ZPLMAX=0.75
      ZPLMIN=0.35
C
      ZCHNEU=.3
C
C      CONSTANT FOR FREE CONVECTION
C      EXPONENT FOR THE INTERPOLATION BETWEEN FREE CONVECTION
C      AND NEUTRAL OVER SEA
C
      ZFREEC=0.0016
      ZGAM=1.25
      Z1DGAM=1./ZGAM
C
C
C     NEUTRAL STABILITY FUNCTIONS (MELLOR/YAMADA, 1982)
C     -------------------------------------------------------
C
      ZH1= 2.22
      ZH2= 0.22
      ZM1= 1.24
      ZM2= 2.37
      ZM4= 3.69
      ZSHN=ZH1*ZH2*SQRT(2.)
      ZSMN=ZSHN*ZM1*ZM2/ZM4
C
      ITOP=1
      ITOPP1=ITOP+1

CGEERT DD9-9-1999 FORCED
      LLSCALE_MOD =.FALSE.

C
C
C     ------------------------------------------------------------------
C
C*         1.     LOCATE AND POSITION SPACE.
C                 ------ --- -------- ------
C
  100 CONTINUE
C
C     ITASK=IQTASK()
      IROW=1
C     IGPTYPE=3+ITASK
C
C     ---------------------------------------------------------------
C
C*         2.     NEW THERMODYNAMIC VARIABLE AND BOUNDARY CONDITIONS.
C                 --- ------------- -------- --- -------- -----------
C
  200 CONTINUE
C
C*         2.1     REPLACE T BY CP(Q)*T+GZ IN THE ATMOSPHERE.
C
  210 CONTINUE
      DO 212 JK=KTDIA,KLEV
      DO 211 JL=KIDIA,KFDIA
      ZCPTGZ(JL,JK)=PGEOM1(JL,JK)+PTM1(JL,JK)*CPD
     *             *(1.+VTMPC2*PQM1(JL,JK))
      ZTETA1(JL,JK)=PTM1(JL,JK)*(100000./PAPM1(JL,JK))**ZKAPPA
      ZTVIR1(JL,JK)=ZTETA1(JL,JK)*(1.+VTMPC1*PQM1(JL,JK)-PXM1(JL,JK))
C
      LO=PTM1(JL,JK).GE.ZTMELT
      ZFAXE(JL,JK)=CVMGT(ALV,ALS,LO)
      ZBET=ZFAXE(JL,JK)/ZCPD
      ZUSUS1=ZBET*ZTETA1(JL,JK)/PTM1(JL,JK)*PXM1(JL,JK)
      ZLTETA1(JL,JK)=ZTETA1(JL,JK)-ZUSUS1
C
      IT=PTM1(JL,JK)*1000.
      ZES=TLUCUA(IT)/PAPM1(JL,JK)
      ZES=AMIN1(ZES,0.5)
      ZCOR=1./(1.-VTMPC1*ZES)
      ZQSS(JL,JK)=ZES*ZCOR
  211 CONTINUE
  212 CONTINUE
C
      DO 214 JK=KTDIA,KLEVM1
      DO 215 JL=KIDIA,KFDIA
      ZHH(JL,JK)=(PGEOM1(JL,JK)-PGEOM1(JL,JK+1))
      ZSDEP1=(PAPHM1(JL,JK)-PAPHM1(JL,JK+1))/(PAPHM1(JL,JK)-
     1        PAPHM1(JL,JK+2))
      ZSDEP2=(PAPHM1(JL,JK+1)-PAPHM1(JL,JK+2))/(PAPHM1(JL,JK)-
     1        PAPHM1(JL,JK+2))
C
      ZQSSM(JL,JK)=ZSDEP1*ZQSS(JL,JK)+ZSDEP2*ZQSS(JL,JK+1)
      ZTMITTE(JL,JK)=ZSDEP1*PTM1(JL,JK)+ZSDEP2*PTM1(JL,JK+1)
      ZTVIRMIT(JL,JK)=ZSDEP1*ZTVIR1(JL,JK)+ZSDEP2*ZTVIR1(JL,JK+1)
      ZFAXEN(JL,JK)=ZSDEP1*ZFAXE(JL,JK)+ZSDEP2*ZFAXE(JL,JK+1)
      ZLWCMIT(JL,JK)=ZSDEP1*PXM1(JL,JK)+ZSDEP2*PXM1(JL,JK+1)
      ZQMIT(JL,JK)=ZSDEP1*PQM1(JL,JK)+ZSDEP2*PQM1(JL,JK+1)
      ZTEMIT(JL,JK)=ZSDEP1*ZTETA1(JL,JK)+ZSDEP2*ZTETA1(JL,JK+1)
      ZCCOVER(JL,JK)=PACLCM(JL,JK)*ZSDEP1+PACLCM(JL,JK+1)*ZSDEP2
  215 CONTINUE
  214 CONTINUE
C
C          COMPUTE FRACTIONAL SURFACE COVERAGES
C
      DO 213 JL=KIDIA,KFDIA
      PCVS(JL)=AMIN1(1.,PSNM1M(JL)*ZQSNCR)
      PWLMX(JL)=ZWLMAX*((1.-PVGRAT(JL))+PVGRAT(JL)*PVLTM(JL))
      ZWLMXI(JL)=1./PWLMX(JL)
      PCVW(JL)=PWLM1M(JL)*ZWLMXI(JL)
 213  CONTINUE
C
C*         2.2     SATURATION PARAMETERS,
C*                 RELATIVE HUMIDITY OVER THE BARE LAND PART
C*                 AND VIRTUAL TEMPERATURE AT THE SURFACE.
C
  220 CONTINUE
C
      DO 221 JL=KIDIA,KFDIA
      LO=(PTSM1M(JL)-TMELT).GT.0.
      ZCVM3=CVMGT(C3LES,C3IES,LO)
      ZCVM4=CVMGT(C4LES,C4IES,LO)
      ZCVM5=CVMGT(C5LES,C5IES,LO)
      IT=PTSM1M(JL)*1000.
      ZES=TLUCUA(IT)/PAPHM1(JL,KLEVP1)
      ZCOR=1./(1.-VTMPC1*ZES)
      ZQS(JL)=ZES*ZCOR
      ZDQS(JL)=ZQS(JL)*ZCVM5*ZCOR*(1./(PTSM1M(JL)-ZCVM4))**2
      PWSM1M(JL)=AMIN1(PWSM1M(JL),PWSMXM(JL))
      ZWSTOP=AMIN1(0.1,PWSMXM(JL))
      ZWSLEV=PWSMXM(JL)-ZWSTOP
      IF(PWSM1M(JL).GT.ZWSLEV) THEN
       ZHUM(JL)=0.5*(1.-COS((PWSM1M(JL)-ZWSLEV)*API/ZWSTOP))
      ELSE
       ZHUM(JL)=0.
      ENDIF
      ZHSOIL(JL)=PCVS(JL)+(1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))
     >           *ZHUM(JL))
      ZHSOIL(JL)=CVMGT(ZHSOIL(JL),1.,LALAND(JL))

CGL.  CORRECTION IN MOIST CONDITIONS
      IF (LLSCALE_MOD) THEN
         ZHSOIL(JL)= ZHSOIL(JL) + PACLCM(JL,KLEV)*(1.-ZHSOIL(JL))
      ENDIF

      LO=PQM1(JL,KLEV).GT.ZQS(JL)
      ZHSOIL(JL)=CVMGT(1.,ZHSOIL(JL),LO)
      ZTESS(JL)=PTSM1M(JL)*(1.E5/PAPHM1(JL,KLEVP1))**ZKAPPA
      ZTVS(JL)=ZTESS(JL)*(1.+VTMPC1*ZHSOIL(JL)*ZQS(JL))
CGL.  NO MOIST CORRECTION STABILITY
      IF (LLSCALE_MOD) THEN
        ZTVS(JL)=ZTESS(JL)*(1.+VTMPC1*PQM1(JL,KLEV))
      ENDIF

  221 CONTINUE
C
C*         2.3     DEFINITION OF THE STOMATAL RESISTANCE
C
 230  CONTINUE
C
      DO 231 JL=KIDIA,KFDIA
      ZWCRIT=ZPLMAX*PWSMXM(JL)
      ZWPWP=ZPLMIN*PWSMXM(JL)
      ZQWEVAP=1./(ZWCRIT-ZWPWP)
      ZSOIL=AMAX1(ZEPSW,AMIN1(1.,(PWSM1M(JL)-ZWPWP)*ZQWEVAP))
      ZSRFL=AMAX1(ZEPSR,PSRFL(JL)*ZVRAD)
      ZABCS=(ZVA+ZVBC)/(ZVC*ZSRFL)
      ZVKLT=ZVK*PVLTM(JL)
#ifdef C90
      ZVXPKLT=EXPHF(ZVKLT)
      ZVXMKLT=EXPHF(-ZVKLT)
      ZLN1=ALOGHF((ZABCS*ZVXPKLT+1.)/(ZABCS+1.))
      ZLN2=ALOGHF((ZABCS+ZVXMKLT)/(ZABCS+1.))
#else
      ZVXPKLT=EXP(ZVKLT)
      ZVXMKLT=EXP(-ZVKLT)
      ZLN1=ALOG((ZABCS*ZVXPKLT+1.)/(ZABCS+1.))
      ZLN2=ALOG((ZABCS+ZVXMKLT)/(ZABCS+1.))
#endif
      ZRSI=(ZVB*ZLN1/ZVABC-ZLN2)/ZVKC
      ZRS0(JL)=1./ZRSI
      ZWET(JL)=ZRS0(JL)/ZSOIL
      LO=PQM1(JL,KLEV).GT.ZQS(JL)
      ZWET(JL)=CVMGT(0.,ZWET(JL),LO)
 231  CONTINUE
C***
      IF (LVDIFF) THEN
C***
C
C     ------------------------------------------------------------------
C
C*         3.     COMPUTATION OF THE EXCHANGE COEFFICIENTS.
C                 ----------- -- --- -------- -------------
C
C        THE SURFACE LAYER IS NOW COMPUTED BEFORE THE OTHER LEVELS
C
  300 CONTINUE
C
C*       3.1       COMPUTATION OF BASIC QUANTITIES: WIND SHEAR,
C*                 RICHARDSON NUMBER,SQUARED MIXING LENGTHS, UNSTABLE
C*                 AND STABLE CASE COMMON FACTORS AND NEUTRAL CASE
C*                 COMMON PART OF THE DRAG COEFFICIENTS.
C
 310  CONTINUE
C
      DO 311 JL=KIDIA,KFDIA
      ZDU2=AMAX1(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
      ZQMITTE=(PQM1(JL,KLEV)+ZQS(JL)*ZHSOIL(JL))/2.
      ZQTMIT=PXM1(JL,KLEV)*0.5+ZQMITTE
      ZTMIT=(PTM1(JL,KLEV)+PTSM1M(JL))/2.
      ZTEMITTE=(ZTETA1(JL,KLEV)+ZTESS(JL))/2.
      ZVIRMITTE=(ZTVIR1(JL,KLEV)+ZTVS(JL))/2.
      ZQSMIT=(ZQSS(JL,KLEV)+ZQS(JL))/2.
      ZQLWI1=PQM1(JL,KLEV)+PXM1(JL,KLEV)
      ZQLWI2=ZQS(JL)*ZHSOIL(JL)

CGL.  IF (LLSCALE_MOD) ZQLWI2 = ZQLWI1

      ZFUX=ZFAXE(JL,KLEV)/(ZCPD*ZTMIT)
      ZFOX=ZFAXE(JL,KLEV)/(ZRD*ZTMIT)
      ZMULT1=1.+VTMPC1*ZQTMIT
      ZMULT2=ZFUX*ZMULT1-ZRVRD
      ZMULT3=ZRDRV*ZFOX*ZQSMIT/(1.+ZRDRV*ZFOX*ZFUX*ZQSMIT)
      ZMULT5=ZMULT1-ZMULT2*ZMULT3
      ZMULT4=ZFUX*ZMULT5-1.
C
      ZDUS1=PACLCM(JL,KLEV)*ZMULT5+(1.-PACLCM(JL,KLEV))*ZMULT1
      ZDUS2=PACLCM(JL,KLEV)*ZMULT4+(1.-PACLCM(JL,KLEV))*VTMPC1
      ZTELDIF=ZLTETA1(JL,KLEV)-ZTESS(JL)
      ZQDDIF=ZQLWI1-ZQLWI2
      ZBUOY=ZDUS1*ZTELDIF+ZDUS2*ZTEMITTE*ZQDDIF
CGL...
      ZGBUOY(JL,KLEV) = ZBUOY
C
      ZRI(JL)=PGEOM1(JL,KLEV)*ZBUOY/(ZVIRMITTE*ZDU2)
      ZRICLS(JL)=ZRI(JL)
#ifdef C90
      ZCDN(JL)=(ZKAP/ALOGHF(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL))))**2
      Z0H=PAZ0M(JL)*EXPHF(2.-86.276*PAZ0M(JL)**0.375)
      ZALO=ALOGHF(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))
      ZALOH=ALOGHF(1.+PGEOM1(JL,KLEV)/(G*Z0H))
#else
      ZCDN(JL)=(ZKAP/ALOG(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL))))**2
      ZALO=ALOG(1.+PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))
COBC  Security against overflow calculating zaloh
#ifdef SIZE_PD4
      ZZZ = 2.-86.276*PAZ0M(JL)**0.375
      IF (ZZZ.LT.-20) THEN
        ZALOH = -ZZZ+ALOG(EXP(ZZZ)+PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))
      ELSE
        Z0H=PAZ0M(JL)*EXP(2.-86.276*PAZ0M(JL)**0.375)
        ZALOH=ALOG(1.+PGEOM1(JL,KLEV)/(G*Z0H))
      ENDIF
#else
      Z0H=PAZ0M(JL)*EXP(2.-86.276*PAZ0M(JL)**0.375)
      ZALOH=ALOG(1.+PGEOM1(JL,KLEV)/(G*Z0H))
#endif
#endif
      ZCHN(JL)=ZKAP**2/(ZALO*ZALOH)
#ifdef C90
      ZUCF(JL)=1./(1.+ZCONS11*ZCDN(JL)*SQRTHF(ABS(ZRI(JL))*(1.
#else
      ZUCF(JL)=1./(1.+ZCONS11*ZCDN(JL)*SQRT(ABS(ZRI(JL))*(1.
#endif
     &          +PGEOM1(JL,KLEV)/(G*PAZ0M(JL)))))
#ifdef C90
      ZSCF(JL)=SQRTHF(1.+ZD*ABS(ZRI(JL)))
#else
      ZSCF(JL)=SQRT(1.+ZD*ABS(ZRI(JL)))
#endif
      ZCONS=ZCONS12*PAPHM1(JL,KLEVP1)/
     &      (PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV)))
#ifdef C90
      ZCFNC(JL)=ZCONS*SQRTHF(ZDU2)*ZCDN(JL)
      ZCFNCH(JL)=ZCONS*SQRTHF(ZDU2)*ZCHN(JL)
#else
      ZCFNC(JL)=ZCONS*SQRT(ZDU2)*ZCDN(JL)
      ZCFNCH(JL)=ZCONS*SQRT(ZDU2)*ZCHN(JL)
#endif
      ZDTHV=AMAX1(0.,(ZTVS(JL)-ZTVIR1(JL,KLEV)))
#ifdef C90
      ZWST(JL)=ZDTHV*SQRTHF(ZDU2)/ZVIRMITTE
      ZCR(JL)=(ZFREEC/(ZCHN(JL)*SQRTHF(ZDU2)))*ABS(ZBUOY)**ZCONS6
#else
      ZWST(JL)=ZDTHV*SQRT(ZDU2)/ZVIRMITTE
      ZCR(JL)=(ZFREEC/(ZCHN(JL)*SQRT(ZDU2)))*ABS(ZBUOY)**ZCONS6
#endif
C
C     CANOPY RESISTANCE
C
      ZWET(JL)=ZWET(JL)/ZCONS
      ZRS0(JL)=ZRS0(JL)/ZCONS
 311  CONTINUE
C
C*    3.2  DIMENSIONLESS HEAT TRANSFER COEFFICIENTS MULTIPLIED
C*         BY PRESSURE THICKNESSES FOR MOMENTUM AND HEAT EXCHANGE
C
 320  CONTINUE
C
      DO 321 JL=KIDIA,KFDIA
      IF(ZRI(JL).GE.0.) THEN
         ZCFM(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS8*ZRI(JL)/ZSCF(JL))
      IF(LALAND(JL)) THEN
	 IF (LFRICHSTAB_ECMWF) THEN
           ZCFH(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS8*ZRI(JL)*ZSCF(JL))
         ELSE
           ZCFH(JL,KLEV)=ZCFNC(JL)/(1.+ZCONS9*ZRI(JL)*ZSCF(JL))
         ENDIF
         ZCH(JL)=ZCFH(JL,KLEV)/ZCFNC(JL)*ZCDN(JL)
      ELSE
	 IF (LFRICHSTAB_ECMWF) THEN
           ZCFH(JL,KLEV)=ZCFNCH(JL)/(1.+ZCONS8*ZRI(JL)*ZSCF(JL))
         ELSE
           ZCFH(JL,KLEV)=ZCFNCH(JL)/(1.+ZCONS9*ZRI(JL)*ZSCF(JL))
         ENDIF
         ZCH(JL)=ZCFH(JL,KLEV)/ZCFNCH(JL)*ZCHN(JL)
      END IF
      ELSE
         ZCFM(JL,KLEV)=ZCFNC(JL)*(1.-ZCONS8*ZRI(JL)*ZUCF(JL))
         IF(LALAND(JL)) THEN
            ZCFH(JL,KLEV)=ZCFNC(JL)*(1.-ZCONS9*ZRI(JL)*ZUCF(JL))
CGEERT      DO CORRECTION FOR LOW SHEAR CASES
C
C           SQUARED SURFACE CONVECTIVE SCALE WSSURF
C           W_C^2 = G/THETA * DTHETAV * DZ
            IF (LLSCALE_MOD) THEN 
             WSSURF = 1.*MAX(0,-PGEOM1(JL,KLEV)*ZGBUOY(JL,KLEV)/(270))

C            CORRECTION
             ZDU2=MAX(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
             ZCFH(JL,KLEV) = ZCFH(JL,KLEV)* SQRT(1. + WSSURF / ZDU2)
            ENDIF
 
            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNC(JL)*ZCDN(JL)
         ELSE
C
C*             SPECIAL FREE CONVECTION LIMIT OVER SEA
C
         ZCFH(JL,KLEV)=ZCFNCH(JL)*((1.+ZCR(JL)**ZGAM)**Z1DGAM)
            ZCH(JL)=ZCFH(JL,KLEV)/ZCFNCH(JL)*ZCHN(JL)
         END IF
      END IF
      ZCDUM(JL,KLEV)=ZCFM(JL,KLEV)
C
C     INTERPOLATIONFUNCTIONS FOR DIAGNOSTICS
C
#ifdef C90
      ZBN(JL)=ZKAP/SQRTHF(ZCDN(JL))
      ZBM(JL)=AMAX1(ZEPSEC,SQRTHF(ZCFM(JL,KLEV)*ZCDN(JL)*
#else
      ZBN(JL)=ZKAP/SQRT(ZCDN(JL))
      ZBM(JL)=AMAX1(ZEPSEC,SQRT(ZCFM(JL,KLEV)*ZCDN(JL)*
#endif
     &        ZCONS17/ZCFNC(JL)))
      ZBH(JL)=AMAX1(ZEPSEC,ZCH(JL)/ZBM(JL)*ZCONS17)
      ZBM(JL)=1./ZBM(JL)
      ZBH(JL)=1./ZBH(JL)
 321  CONTINUE
 3200 CONTINUE
C   -----------------------------------------------------------------
C
C
C    INITIALIZE SURFACE EMISSION FOR TRACERS
C
C     IF(KTRAC.GT.0) THEN
C     DO 3211 JT=1,KTRAC
C     DO 3210 JL=KIDIA,KFDIA
C     ZXTEMS(JL,JT)=0.
C3210 CONTINUE
C3211 CONTINUE
C
C
C     SURFACE EMISSIONS AND DRY DEPOSITION
C
C       IF(LEMIS) THEN
C         DO 3212 JL=KIDIA,KFDIA
C         Z1MXTM1(JL)=
C    *      PAPM1(JL,KLEV)/(PTM1(JL,KLEV)*RD*(1.+VTMPC1*PQM1(JL,KLEV)))
C3212     CONTINUE
C
C         CALL XTEMISS(KLON,   KLEV,     IROW,   CVDIFTS,  DTIME, ITASK,
C    *                 PXTM1,  ZXTEMS,   Z1MXTM1,
C    *                 LALAND, PFORESTM, PSNM1M)
C       ENDIF
C     ENDIF
C---------------------------------------------------------------------
C
C*       3.3       EQUIVALENT EVAPOTRANSPIRATION EFFICIENCY COEFFICIENT
C
 330  CONTINUE
C
      DO 331 JL=KIDIA,KFDIA
      ZWET(JL)=PCVS(JL)+(1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))/
     *         (1.+ZCFH(JL,KLEV)*ZWET(JL)))
      ZWET(JL)=CVMGT(ZWET(JL),1.,LALAND(JL))
COBC
      LO=(ZHUM(JL)*ZQS(jl)).LE.PQM1(JL,KLEV)
      ZCSAT(JL)=PCVS(JL)+
     *      (1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))*CVMGT(0.,ZHUM(JL),LO))
      ZCAIR(JL)=PCVS(JL)+
     *         (1.-PCVS(JL))*(PCVW(JL)+(1.-PCVW(JL))*CVMGT(0.,1.,LO))
      ZCSAT(JL)=CVMGT(ZCSAT(JL),1.,LALAND(JL))
      ZCAIR(JL)=CVMGT(ZCAIR(JL),1.,LALAND(JL))
      LO=PQM1(JL,KLEV).GT.ZQS(JL)
      ZCSAT(JL)=CVMGT(1.,ZCSAT(JL),LO)
      ZCAIR(JL)=CVMGT(1.,ZCAIR(JL),LO)
      ZCSAT(JL)=PVGRAT(JL)*ZWET(JL)+(1.-PVGRAT(JL))*ZCSAT(JL)
      ZCAIR(JL)=PVGRAT(JL)*ZWET(JL)+(1.-PVGRAT(JL))*ZCAIR(JL)
      ZCPTS(JL)=PTSM1M(JL)*CPD*(1.+VTMPC2*
     *         (ZCSAT(JL)*ZQS(JL)+(1.-ZCAIR(JL))*PQM1(JL,KLEV)))
 331  CONTINUE
C
C*       3.4       COMPUTATION OF THE PBL EXTENSION.
C
 340  CONTINUE
C
      DO 341 JL=KIDIA,KFDIA
      ZDU2=AMAX1(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
CJHC
C
C     ------------------------------------------------
C     ECHAM CORIOLIS-FUNCTION CHANGED INTO HIRLAM SINLAT ARRAY
C     ------------------------------------------------
C
      ZCOR=AMAX1(ABS(2.*OMEGA*PSINLAT(JL)),ZEPCOR)
CJHC
C     ZCOR=AMAX1(ABS(CORIOL(IROW)),ZEPCOR)
      LO=PAZ0M(JL).GT.ZEPZ0O
#ifdef C90
      ZCDN2M=CVMGT((ZKAP/ALOGHF(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O)))**2,
#else
      ZCDN2M=CVMGT((ZKAP/ALOG(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O)))**2,
#endif
     &        ZCDN(JL),LO)
      ZCDNR=ZCDN2M/ZCDN(JL)
CEVM
C   assignment of zcfm2m is corrected wrt original ECHAM4 
C   (error pointed out by Reinder Ronda, November 1997)
CEVM
      ZCFM2M=CVMGT(ZCFNC(JL)*ZCDNR*(1.-ZCONS8*ZRI(JL) /(1.+ZCONS11*
#ifdef C90
     &    ZCDN2M*SQRTHF(ABS(ZRI(JL))*(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O))))),
#else
     &    ZCDN2M*SQRT(ABS(ZRI(JL))*(1.+PGEOM1(JL,KLEV)/(G*ZEPZ0O))))),
#endif
     &       ZCFM(JL,KLEV)*ZCDNR,LO.AND.ZRI(JL).LT.0.)
#ifdef C90
      ZUSTAR(JL)=SQRTHF(ZCFM2M*SQRTHF(ZDU2)*PTM1(JL,KLEV)*
#else
      ZUSTAR(JL)=SQRT(ZCFM2M*SQRT(ZDU2)*PTM1(JL,KLEV)*
#endif
     &       (1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV))
     &       /(ZCONS12*PAPHM1(JL,KLEVP1)))
      ZHDYN(JL)=AMIN1(PGEOM1(JL,1)/G,ZCHNEU*ZUSTAR(JL)/ZCOR)
C
      IHPBLC(JL)=KLEV
      IHPBLD(JL)=KLEV
 341  CONTINUE
C
      DO 343 JK=KLEVM1,1,-1
      DO 342 JL=KIDIA,KFDIA
      ZDS=ZCPTGZ(JL,JK)-ZCPTGZ(JL,KLEV)
      ZDZ=PGEOM1(JL,JK)/G-ZHDYN(JL)
#ifdef C90
      IHPBLC(JL)=CVMGT(JK,IHPBLC(JL),IHPBLC(JL).EQ.KLEV.AND.ZDS.GT.0.)
      IHPBLD(JL)=CVMGT(JK,IHPBLD(JL),IHPBLD(JL).EQ.KLEV.AND.ZDZ.GE.0.)
#else
      IHPBLC(JL)=ICVMGT(JK,IHPBLC(JL),IHPBLC(JL).EQ.KLEV.AND.ZDS.GT.0.)
      IHPBLD(JL)=ICVMGT(JK,IHPBLD(JL),IHPBLD(JL).EQ.KLEV.AND.ZDZ.GE.0.)
#endif
 342  CONTINUE
 343  CONTINUE
C
C      CONVECTIVE VELOCITY SCALE, MONIN-OBUKHOV LENGTH AND
C      TKE BOUNDARY CONDITION (MAILHOT/BENOIT, 1982)
C
      DO 344 JL=KIDIA,KFDIA
      IHPBL(JL)=MIN0(IHPBLC(JL),IHPBLD(JL),KLEV-3)
      ZGHABL=AMIN1(50000.,PGEOM1(JL,IHPBL(JL)))
      IF(ZWST(JL).GT.ZEPSR) THEN
         ZCONVS=(ZWST(JL)*ZCH(JL)*ZGHABL)**ZCONS6
         ZMONOB=(ZUSTAR(JL)**3)/(ZKAP*G*ZWST(JL)*ZCH(JL))
         ZSTABF=(PGEOM1(JL,KLEV)/(G*ZMONOB))**(ZCONS6*2.)
         ZSTABF=AMIN1(ZUSTF*3.,ZSTABF)
      ELSE
         ZCONVS=0.
         ZSTABF=0.
      ENDIF
      ZTKEVN(JL,KLEV)=(ZUSTF+ZSTABF)*(ZUSTAR(JL)**2)
     >    +ZWSTF*(ZCONVS**2)
      ZTKEVN(JL,KLEV)=AMAX1(ZTKEMIN,ZTKEVN(JL,KLEV))
CGL..
      IF (LLSCALE_MOD) THEN
        ZUO = 0.2
        ZGMONIN(JL) = 300*( 1. -  EXP( -(ZUSTAR(JL)/ZUO)**2) )
      ENDIF
CGL..
  344 CONTINUE
C
      IF(NSTEP.EQ.NSTART) THEN
      DO 345 JL=KIDIA,KFDIA
       PTKEM1M(JL,KLEV)=ZTKEVN(JL,KLEV)
       PTKEM(JL,KLEV)=ZTKEVN(JL,KLEV)
  345 CONTINUE
      ENDIF
C*       3.5       VERTICAL LOOP.
C
 350  CONTINUE
C***
      DO 372 JK=KTDIA,KLEVM1
C***
C
C*       3.6       COMPUTATION OF BASIC QUANTITIES: WIND SHEAR,
C*                 BUOYANCY, RICHARDSON NUMBER, MIXING LENGTHS.
C
 360  CONTINUE
C
C     MODIFIED RICHARDSON NUMBER IN VERTICAL LOOP
C
#ifdef C90
CDIR$ IVDEP
#endif
      DO 361 JL=KIDIA,KFDIA
      ZQTMIT=ZLWCMIT(JL,JK)+ZQMIT(JL,JK)
      ZFUX=ZFAXEN(JL,JK)/(ZCPD*ZTMITTE(JL,JK))
      ZFOX=ZFAXEN(JL,JK)/(ZRD*ZTMITTE(JL,JK))
      ZMULT1=1.+VTMPC1*ZQTMIT
      ZMULT2=ZFUX*ZMULT1-ZRVRD
      ZMULT3=ZRDRV*ZFOX*ZQSSM(JL,JK)/
     1   (1.+ZRDRV*ZFUX*ZFOX*ZQSSM(JL,JK))
      ZMULT5=ZMULT1-ZMULT2*ZMULT3
      ZMULT4=ZFUX*ZMULT5-1.
C
      ZDUS1=ZCCOVER(JL,JK)*ZMULT5+(1.-ZCCOVER(JL,JK))*ZMULT1
      ZDUS2=ZCCOVER(JL,JK)*ZMULT4+(1.-ZCCOVER(JL,JK))*VTMPC1
      ZTELDIF=(ZLTETA1(JL,JK)-ZLTETA1(JL,JK+1))/ZHH(JL,JK)*G
      ZDQTOT=(PQM1(JL,JK)+PXM1(JL,JK))-(PQM1(JL,JK+1)+PXM1(JL,JK+1))
      ZQDDIF=ZDQTOT/ZHH(JL,JK)*G
      ZBUOY=(ZTELDIF*ZDUS1+ZTEMIT(JL,JK)*ZDUS2*
     1            ZQDDIF)*G/ZTVIRMIT(JL,JK)
      ZDIVV=(PUM1(JL,JK)-PUM1(JL,JK+1))**2
      ZDIVV1=(PVM1(JL,JK)-PVM1(JL,JK+1))**2
      ZSHEAR=AMAX1(ZEPDU2,(ZDIVV+ZDIVV1))*(G/ZHH(JL,JK))**2
      ZRI(JL)=ZBUOY/ZSHEAR

CGL...
      ZGBUOY(JL,JK) = ZBUOY
      ZGSHEAR(JL,JK) = ZSHEAR 
      ZGRI(JL,JK) = ZRI(JL)

  361 CONTINUE
C***
  372 CONTINUE
C***
      
      IF (LLSCALE_MOD) THEN
CGL...
C
C     CGL...
C 
C     COMPUTE A SIMPLE QUADRATIC LENGTH SCALE
C     THIS IS A PRELIMINARY CODE, WHICH GIVES A "QUADRATIC" LENGTHSCALE
C     ACCORDING TO 1/ZMIXQUAD = 1/ZMIXUP + 1/ZMIXDW
C     ZMIXUP: LENGTHSCALE FROM BOTTOM (SAY GROUND)
C        LOWER BOUNDARY: GROUND OR LOWEST POSITION UNSTABLE LAYER
C     ZMIXDW: LENGTHSCALE FROM TOP (SAY INVERSION)
C        UPPER BOUNDARY: "INVERSION"
C     BOTH ZMIXUP AND ZMIXDW INCREASE FOR UNSTABLE AND NEUTRAL 
C     CONDITIONS, AND DECREASE FOR STABLE CONDITIONS.
C     THIS IS GOVERNED BY ZBUOYTHRESS; SMALL ZBUOYTHRESS ==> 
C     STRONG DAMPING STABLE CONDITIONS (INVERSION), AND 
C     INCREASE FOR UNSTABLE CONDITIONS. 
C     IN NEUTRAL CONDITIONS THE LENGTHSCALE ZMIXUP ~ ZMIXQUAD ~ 0.4*Z 
C     NEAR THE SURFACE
C     ZPRANDT: GOVERNS DIFFERENCE BETWEEN LENGTHSCALE FOR MOMENTUM
C              AND HEAT.
C     
      ZBUOYTHRESS = 0.1E-4 
      PI2 = 2. * ATAN(1.)
      ZPRANDT = 0.33
!      
!     COMPUTE BOTTOM UP LENGTH SCALE
!
      DO JL=KIDIA,KFDIA                   
        ZMIXUPH(JL, KLEV) = 0.
        ZMIXUPM(JL, KLEV) = 0.
      ENDDO

      DO JK = KLEVM1, KTDIA+1, -1          ! VERTICAL LOOP BOTTOM-UP
        DO JL=KIDIA,KFDIA                  

          RHO = 0.5*(PAPHM1(JL,JK+1)+PAPHM1(JL,JK+2))
     *             /(ZRD*(PTVM1(JL,JK+1)))
          DZ = (PAPHM1(JL,JK+2) - PAPHM1(JL,JK+1))/(G*RHO)

          ZBUOY_FUL = 0.5*(ZGBUOY(JL,JK) + ZGBUOY(JL,MIN(JK+1,KLEVM1))) 
          X = ZBUOY_FUL / ZBUOYTHRESS
          IF (X.GT.0) THEN
            DZM = 0.4*DZ - 1.6*DZ*ZPRANDT*X*(1+X)/PI2
            DZH = 0.4*DZ - 1.6*X*(1+X)*DZ/PI2
          ELSE
            DZM = 0.4*DZ - 1.6*DZ*ATAN(ZPRANDT*X)/PI2 
            DZH = 0.4*DZ - 1.6*DZ*ATAN(X)/PI2
          ENDIF

!         BOTTOM UP LENGTHSCALE

          ZMIXUPH(JL, JK) =  ZMIXUPH (JL, JK + 1) + DZH
          ZMIXUPH(JL, JK) = MAX(ZMIXUPH(JL, JK) , MIN(0.4*DZ,60.))
          ZMIXUPM(JL, JK) =  ZMIXUPM (JL, JK + 1) + DZM
          ZMIXUPM(JL, JK) = MAX(ZMIXUPM(JL, JK) , MIN(0.4*DZ,60.))

        ENDDO
      ENDDO

!
!     COMPUTE TOP DOWN LENGTH SCALE 
!
      DO JL=KIDIA,KFDIA                   
        ZMIXDWH(JL, KTDIA) = 0.
        ZMIXDWM(JL, KTDIA) = 0.
      ENDDO

      DO JK= KTDIA + 1, KLEVM1            ! VERTICAL LOOP TOP, DOWN
        DO JL=KIDIA,KFDIA                        
 
          RHO = 0.5*(PAPHM1(JL,JK+1)+PAPHM1(JL,JK))
     *             /(ZRD*(PTVM1(JL,JK)))
          DZ = (PAPHM1(JL,JK+1) - PAPHM1(JL,JK))/(G*RHO)

          ZBUOY_FUL = 0.5*(ZGBUOY(JL,JK) + ZGBUOY(JL,JK-1)) 
          X = ZBUOY_FUL / ZBUOYTHRESS
          IF (X.GT.0) THEN
            DZM = 0.4*DZ - 1.6*DZ*ZPRANDT*X*(1+X)/PI2
            DZH = 0.4*DZ - 1.6*X*(1+X)*DZ/PI2
          ELSE
            DZM = 0.4*DZ - 1.6*DZ*ATAN(ZPRANDT*X)/PI2
            DZH = 0.4*DZ - 1.6*DZ*ATAN(X)/PI2
          ENDIF

!         TOP DOWN LENGTHSCALE 

          ZMIXDWH(JL,JK) =  ZMIXDWH (JL,JK - 1)  +  DZH             
          ZMIXDWH(JL,JK) = MAX (ZMIXDWH(JL,JK),MIN(0.4*DZ,60.))
          ZMIXDWM(JL,JK) =  ZMIXDWM (JL,JK - 1)  +  DZM
          ZMIXDWM(JL,JK) = MAX (ZMIXDWM(JL,JK),MIN(0.4*DZ,60.))

!         COMPOSED LENGTH SCALE OF TOP-DOWN LS AND BOTTOM-UP LS

          ZLENGTHRH = 1. / ZMIXDWH(JL,JK) + 1. / ZMIXUPH(JL,JK)
          ZMIXQUADH(JL,JK) = 1. / ZLENGTHRH
          ZLENGTHRM = 1. / ZMIXDWM(JL,JK) + 1. / ZMIXUPM(JL,JK)
          ZMIXQUADM(JL,JK) = 1. / ZLENGTHRM

         ENDDO
      ENDDO                                  ! END VERTICAL LOOP
C
      ENDIF ! (LLSCALE_MOD)
C
C     END COMPUTATION FREE TURBULENCE LENGTH SCALE 
C     LENGTHSCALES ARE IN ZMIXQUADH (HEAT) AND ZMIXQUADM (MOMENTUM)
C     
C
CGL...
C     BEGIN NEW LOOP
C
C***
      DO JK=KTDIA,KLEVM1
C***
      DO JL=KIDIA,KFDIA

C
C      ASYMPTOTIC MIXING LENGTH FOR MOMENTUM AND
C      HEAT (ZLAM) ABOVE THE PBL AS A FUNCTION OF HEIGHT
C      ACCORDING TO HOLTSLAG AND BOVILLE (1992), J. CLIMATE.
C
#ifdef C90
      ZHEXP=EXPHF(1.-PGEOM1(JL,JK)/PGEOM1(JL,IHPBL(JL)))
#else
      ZHEXP=EXP(1.-PGEOM1(JL,JK)/PGEOM1(JL,IHPBL(JL)))
#endif
        ZLAM=ZZZLAM+(ZCONS3-ZZZLAM)*ZHEXP
      IF(JK.GE.IHPBL(JL)) THEN
        ZCONS23=ZCONS25
      ELSE
        ZCONS23=ZCONS2/ZLAM
      END IF
C
C     MIXING LENGTH (BLACKADAR) + STABILITY DEPENDENT FUNCTION
C
      Z2GEOMF=PGEOM1(JL,JK)+PGEOM1(JL,JK+1)
      ZZ2GEO=ZCONS2*Z2GEOMF
      ZMIX=ZZ2GEO/(1.+ZCONS23*Z2GEOMF)
CGL...
      IF (LLSCALE_MOD) THEN
CGL...
C         BRINKOP AND ROECKNER (1995) FORMULATION FOR THE 
C         MIXING LENGTH SCALES
C         ZNBRUNT = BRUNT VAISALA FREQUENCY (SQUARED)
C         ZENTR  = ENTRAINMENT PARAMETER
C         ZMAILBEN = CONSTANT MAILHOT AND BENOIT (1982) 
   
          ZENTR = 0.2 
          ZMAILBEN= 1.00
          ZENTRH  = ZENTR
          ZENTRM  = 2*ZENTR 

          ZMIX2 =  ZZZLAM * ATAN(PGEOM1(JL,JK)/(G*200.))/PI2  !ASYMTOTIC LSCALE
C         ZMIX2 --> ZZZLAM (30 m) ABOVE SAY 500 m.
          ZMIXH =  MAX(ZMIXQUADH(JL,JK),ZMIX2)         
          ZMIXM =  MAX(ZMIXQUADM(JL,JK),ZMIX2)

          ZNBRUNT = ZGBUOY(JL,JK)

#ifdef C90
          ZTKESQ  = SQRTHF(MAX(PTKEM1M(JL,JK),ZTKEMIN))
          IF (ZNBRUNT.GT.0) THEN
            ZMIXCH = 1. +  ZMIXH*SQRTHF(ZNBRUNT)/(ZENTRH*ZTKESQ)     
            ZMIXCM = 1. +  ZMIXM*SQRTHF(ZNBRUNT)/(ZENTRM*ZTKESQ)     
          ELSE
            ZMIXCH = 1.
            ZMIXCM = 1.
          ENDIF        
#else
          ZTKESQ  = SQRT(MAX(PTKEM1M(JL,JK),ZTKEMIN)) 
          IF (ZNBRUNT.GT.0) THEN
            ZMIXCH = 1. +  ZMIXH*SQRT(ZNBRUNT)/(ZENTRH*ZTKESQ)     
            ZMIXCM = 1. +  ZMIXM*SQRT(ZNBRUNT)/(ZENTRM*ZTKESQ)     
          ELSE
            ZMIXCH = 1.
            ZMIXCM = 1.
          ENDIF 
#endif       

          ZSM=ZMAILBEN/ZMIXCM
          ZSH=ZMAILBEN/ZMIXCH

CGL..     INHOMOGENETY FACTOR SHEAR/BUOYANCY DRIVEN
          ZIFACH = 1 - 0.5*EXP (-Z2GEOMF/(2*G*ABS(ZGMONIN(JL))))
          ZIFACM = 1 - 0.5*EXP (-Z2GEOMF/(2*G*ABS(ZGMONIN(JL))))
          ZSH = ZSH*ZIFACH
          ZSM = ZSM*ZIFACM
CGL.. 

      ELSE       ! ECHAM4 lengthscale 
C
C     STABILITY FUNCTIONS (LOUIS, 1979)
C
               
CGL...
      ZRI(JL) = ZGRI(JL,JK)
      ZMIXH = ZMIX
      ZMIXM = ZMIX
CGL...

      ZALH2=ZMIX*ZMIX
#ifdef C90
      ZUCF(JL)=1./(1.+ZCONS5*ZALH2*SQRTHF(ABS(ZRI(JL))*(((PGEOM1(JL,JK)
#else
      ZUCF(JL)=1./(1.+ZCONS5*ZALH2*SQRT(ABS(ZRI(JL))*(((PGEOM1(JL,JK)
#endif
     *         /PGEOM1(JL,JK+1))**ZCONS6-1.)/(PGEOM1(JL,JK)
     *      -PGEOM1(JL,JK+1)))**3/(PGEOM1(JL,JK+1))))
      IF(ZRI(JL).LT.0.) THEN
       ZSH=ZSHN*(1.-ZCONS9*ZRI(JL)*ZUCF(JL))
       ZSM=ZSMN*(1.-ZCONS8*ZRI(JL)*ZUCF(JL))
      ELSE
#ifdef C90
       ZSH=ZSHN/(1.+ZCONS8*ZRI(JL)*SQRTHF(1.+ZRI(JL)))
       ZSM=ZSMN/(1.+ZCONS8*ZRI(JL)/SQRTHF(1.+ZD*ZRI(JL)))
#else
       ZSH=ZSHN/(1.+ZCONS8*ZRI(JL)*SQRT(1.+ZRI(JL)))
       ZSM=ZSMN/(1.+ZCONS8*ZRI(JL)/SQRT(1.+ZD*ZRI(JL)))
#endif
      END IF
CGL...
C     ENDIF (LLSCALE_MOD)
      END IF
CGL...
C
C*       3.7       DIMENSIONLESS COEFFICIENTS MULTIPLIED BY PRESSURE
C*                 THICKNESSES FOR MOMENTUM AND HEAT EXCHANGE.
C
 370  CONTINUE
C
C
CGL...      ZZB=ZSHEAR*ZMIX*ZSM-ZBUOY*ZMIX*ZSH
CGL...      ZDISL=ZDA1*ZMIX/ZTMST
      ZZB=ZGSHEAR(JL,JK)*ZMIXM*ZSM-ZGBUOY(JL,JK)*ZMIXH*ZSH
      ZDISL=ZDA1*ZMIXM/ZTMST

#ifdef C90
      ZKTEST=1.+(ZZB*ZTMST+SQRTHF(PTKEM1M(JL,JK))*2.)/ZDISL
#else
      ZKTEST=1.+(ZZB*ZTMST+SQRT(PTKEM1M(JL,JK))*2.)/ZDISL
#endif
      IF (ZKTEST.LE.1.) THEN
       ZTKEVN(JL,JK)=ZTKEMIN
      ELSE
#ifdef C90
       ZTKEVN(JL,JK)=AMAX1(ZTKEMIN,(ZDISL*(SQRTHF(ZKTEST)-1.))**2)
#else
       ZTKEVN(JL,JK)=AMAX1(ZTKEMIN,(ZDISL*(SQRT(ZKTEST)-1.))**2)
#endif
      ENDIF
      IF(NSTEP.EQ.NSTART) THEN
       PTKEM1M(JL,JK)=ZTKEVN(JL,JK)
       PTKEM(JL,JK)=ZTKEVN(JL,JK)
      END IF
#ifdef C90
      ZTKESQ=SQRTHF(AMAX1(ZTKEMIN,PTKEM1M(JL,JK)))
#else
      ZTKESQ=SQRT(AMAX1(ZTKEMIN,PTKEM1M(JL,JK)))
#endif
CGL...      ZZZM=ZMIX*ZSM*ZTKESQ
CGL...      ZZZH=ZMIX*ZSH*ZTKESQ
      ZZZM=ZMIXM*ZSM*ZTKESQ 
      ZZZH=ZMIXH*ZSH*ZTKESQ

#ifdef EVM
C
CEVM981020 BUG-FIX AS INDICATED BY MPI-US
C     ZTVIRMIT SHOULD BE VIRTUAL TEMPERATURE INSTEAD OF POT.VIRT.TEMP.
C     ZALF=PAPHM1(JL,JK+1)/(ZTVIRMIT(JL,JK)*ZHH(JL,JK)*ZRD)
      ZZTVM=(PTVM1(JL,JK)+PTVM1(JL,JK+1))*0.5
      ZALF=PAPHM1(JL,JK+1)/(ZZTVM*ZHH(JL,JK)*ZRD)
CEVM981020 
#else
C
      ZALF=PAPHM1(JL,JK+1)/(ZTVIRMIT(JL,JK)*ZHH(JL,JK)*ZRD)
#endif
      ZCFM(JL,JK)=ZZZM*ZCONS18*ZALF
      ZCFH(JL,JK)=ZZZH*ZCONS18*ZALF
#ifdef C90
      ZCDUM(JL,JK)=ZCFM(JL,JK)/ZTKESQ*SQRTHF(ZTKEVN(JL,JK))
#else
      ZCDUM(JL,JK)=ZCFM(JL,JK)/ZTKESQ*SQRT(ZTKEVN(JL,JK))
#endif

CGL...
      ENDDO     ! JL-LOOP 
C***
      ENDDO     ! JK-LOOP
C***
CGL...  361 CONTINUE
CGL...***
CGL...  372 CONTINUE
CGL...***

C
C*       3.8        DIFFUSION IMPLICIT COMPUTATIONS FOR TKE
C                   --------- -------- ------------ --- ---
C
      DO 380 JK=KTDIA,KLEV
      DO 381 JL=KIDIA,KFDIA
      ZEDIF(JL,JK)=ZTPFAC2*ZTKEVN(JL,JK)
  381 CONTINUE
  380 CONTINUE
C
      DO 385 JL=KIDIA,KFDIA
      ZTCOE(JL)=(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5
      ZQDP=1./(PAPM1(JL,ITOPP1)-PAPM1(JL,ITOP))
      ZDISC=1./(1.+(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5*ZQDP)
      ZEBSM(JL,ITOP)=ZDISC*(ZCDUM(JL,ITOP)+ZCDUM(JL,ITOPP1))*0.5*ZQDP
      ZEDIF(JL,ITOP)=ZDISC*ZEDIF(JL,ITOP)
  385 CONTINUE
C
      DO 386 JK=ITOPP1,KLEV-2
      DO 387 JL=KIDIA,KFDIA
      ZQDP=1./(PAPM1(JL,JK+1)-PAPM1(JL,JK))
      ZFAC=ZTCOE(JL)*ZQDP
      ZTCOE(JL)=(ZCDUM(JL,JK+1)+ZCDUM(JL,JK))*0.5
      ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,JK-1))+(ZCDUM(JL,JK+1)+
     1 ZCDUM(JL,JK))*0.5*ZQDP)
      ZEBSM(JL,JK)=ZDISC*(ZCDUM(JL,JK+1)+ZCDUM(JL,JK))*0.5*ZQDP
      ZEDIF(JL,JK)=ZDISC*(ZEDIF(JL,JK)+ZFAC*ZEDIF(JL,JK-1))
  387 CONTINUE
  386 CONTINUE
C
      DO 390 JL=KIDIA,KFDIA
      ZQDP=1./(PAPM1(JL,KLEV)-PAPM1(JL,KLEVM1))
      ZFAC=ZTCOE(JL)*ZQDP
      ZTCOE(JL)=(ZCDUM(JL,KLEV)+ZCDUM(JL,KLEVM1))*0.5
      ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,KLEV-2))+(ZCDUM(JL,KLEV)+
     1   ZCDUM(JL,KLEVM1))*0.5*ZQDP)
      ZEDIF(JL,KLEVM1)=ZDISC*((ZCDUM(JL,KLEV)+ZCDUM(JL,KLEVM1))*0.5
     1 *ZQDP*ZEDIF(JL,KLEV)+ZEDIF(JL,KLEVM1)+ZFAC*ZEDIF(JL,KLEV-2))
  390 CONTINUE
C
      DO 392 JK=KLEV-2,ITOP,-1
      DO 393 JL=KIDIA,KFDIA
      ZEDIF(JL,JK)=ZEDIF(JL,JK)+ZEBSM(JL,JK)*ZEDIF(JL,JK+1)
  393 CONTINUE
  392 CONTINUE
C
C --------------------------------------------------------------------
C
C*    TIME INTEGRATION OF TURBULENT KINETIC ENERGY AND CHECK
C     ---- ----------- -- --------- ------- ------ --- -----
C
      DO 394 JK=ITOP,KLEV
      ZTEST=0.
      DO 395 JL=KIDIA,KFDIA
      PTKE(JL,JK)=ZEDIF(JL,JK)+ZTPFAC3*ZTKEVN(JL,JK)
      ZTEST=ZTEST+CVMGM(1.,0.,PTKE(JL,JK))
  395 CONTINUE
#ifdef RS6000
      IF(ZTEST.NE.0.) CALL ABORT
#elif SGR10000
      IF(ZTEST.NE.0.) STOP
#else
      IF(ZTEST.NE.0.) CALL ABORT('TKE IS NEGATIVE')
#endif
  394 CONTINUE
C
C*    TIME FILTER FOR TURBULENT KINETIC ENERGY
C     ---- ------ --- --------- ------- ------
C
      IF(NSTEP.NE.NSTART) THEN
        ZEPS=EPS
      ELSE
        ZEPS=0.
      ENDIF
      DO 397 JK=KTDIA,KLEV
      DO 396 JL=KIDIA,KFDIA
      PTKEM1(JL,JK)=PTKEM(JL,JK)
     *            +ZEPS*(PTKEM1M(JL,JK)-2.*PTKEM(JL,JK)+PTKE(JL,JK))
  396 CONTINUE
  397 CONTINUE
#ifdef EVM
C
C*    VERTICALLY INTEGRATED TURBULENT KINETIC ENERGY
C     ---------- ---------- --------- ------- ------
C
      DO 1391 JL=KIDIA,KFDIA
	PTKEVI(JL)=0.
 1391 CONTINUE
      DO 1393 JK=KTDIA,KLEV
      DO 1394 JL=KIDIA,KFDIA
	PTKEVI(JL)=PTKEVI(JL)
     *            + (PAPHM1(JL,JK+1)-PAPHM1(JL,JK))*PTKEM1M(JL,JK)
 1394 CONTINUE
 1393 CONTINUE
      DO 1397 JL=KIDIA,KFDIA
	PTKEVI(JL)=PTKEVIM(JL)+PTKEVI(JL)*ZDIAGT/G
 1397 CONTINUE
#endif
C
C -----------------------------------------------------------------
C
C
C*         4.     DIFFUSION IMPLICIT COMPUTATIONS FOR MOMENTUM.
C                 --------- -------- ------------ --- ---------
C
  400 CONTINUE
C
C
C*         4.1     SETTING OF RIGHT HAND SIDES.
C
  410 CONTINUE
      DO 412 JK=ITOP,KLEV
      DO 411 JL=KIDIA,KFDIA
      ZUDIF(JL,JK)=ZTPFAC2*PUM1(JL,JK)
      ZVDIF(JL,JK)=ZTPFAC2*PVM1(JL,JK)
  411 CONTINUE
  412 CONTINUE
C
C*         4.2     TOP LAYER ELIMINATION.
C
  420 CONTINUE
C
      DO 421 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,ITOPP1)-PAPHM1(JL,ITOP))
      ZDISC=1./(1.+ZCFM(JL,ITOP)*ZQDP)
      ZEBSM(JL,ITOP)=ZDISC*(ZCFM(JL,ITOP)*ZQDP)
      ZUDIF(JL,ITOP)=ZDISC*ZUDIF(JL,ITOP)
      ZVDIF(JL,ITOP)=ZDISC*ZVDIF(JL,ITOP)
  421 CONTINUE
C
C*         4.3     ELIMINATION FOR MIDDLE LAYERS.
C
  430 CONTINUE
C
      DO 432 JK=ITOPP1,KLEVM1
      DO 431 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
      ZFAC=ZCFM(JL,JK-1)*ZQDP
      ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,JK-1))+ZCFM(JL,JK)*ZQDP)
      ZEBSM(JL,JK)=ZDISC*(ZCFM(JL,JK)*ZQDP)
      ZUDIF(JL,JK)=ZDISC*(ZUDIF(JL,JK)+ZFAC*ZUDIF(JL,JK-1))
      ZVDIF(JL,JK)=ZDISC*(ZVDIF(JL,JK)+ZFAC*ZVDIF(JL,JK-1))
  431 CONTINUE
  432 CONTINUE
C
C*         4.4     BOTTOM LAYER ELIMINATION.
C
  440 CONTINUE
C
      DO 441 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,KLEVP1)-PAPHM1(JL,KLEV))
      ZFAC=ZCFM(JL,KLEVM1)*ZQDP
      ZTCOE(JL)=ZCFM(JL,KLEV)
      ZDISC=1./(1.+ZFAC*(1.-ZEBSM(JL,KLEVM1))+ZCFM(JL,KLEV)*ZQDP)
      ZUDIF(JL,KLEV)=ZDISC*(ZUDIF(JL,KLEV)+ZFAC*ZUDIF(JL,KLEVM1))
      ZVDIF(JL,KLEV)=ZDISC*(ZVDIF(JL,KLEV)+ZFAC*ZVDIF(JL,KLEVM1))
  441 CONTINUE
C
C*         4.5     BACK-SUBSTITUTION.
C
  450 CONTINUE
C
      DO 452 JK=KLEVM1,ITOP,-1
      DO 451 JL=KIDIA,KFDIA
      ZUDIF(JL,JK)=ZUDIF(JL,JK)+ZEBSM(JL,JK)*ZUDIF(JL,JK+1)
      ZVDIF(JL,JK)=ZVDIF(JL,JK)+ZEBSM(JL,JK)*ZVDIF(JL,JK+1)
  451 CONTINUE
  452 CONTINUE
C
C*         4.6     INCREMENTATION OF U AND V TENDENCIES AND STORAGE OF
C*                 THE DISSIPATION.
C
  460 CONTINUE
C
      DO 461 JL=KIDIA,KFDIA
      ZVIDIS(JL)=0.
  461 CONTINUE
C***
      DO 471 JK=ITOP,KLEV
C***
      DO 462 JL=KIDIA,KFDIA
      ZDUDT=(ZUDIF(JL,JK)-ZTPFAC2*PUM1(JL,JK))*ZCONS13
      PVOM(JL,JK)=PVOM(JL,JK)+ZDUDT
      ZDVDT=(ZVDIF(JL,JK)-ZTPFAC2*PVM1(JL,JK))*ZCONS13
      PVOL(JL,JK)=PVOL(JL,JK)+ZDVDT
      ZDIS(JL,JK)=0.5*((ZTPFAC2*PUM1(JL,JK)-ZUDIF(JL,JK))*(ZTPFAC4*
     *            PUM1(JL,JK)+ZUDIF(JL,JK))+(ZTPFAC2*PVM1(JL,JK)-
     *            ZVDIF(JL,JK))*(ZTPFAC4*PVM1(JL,JK)+ZVDIF(JL,JK)))
      ZVIDIS(JL)=ZVIDIS(JL)+ZDIS(JL,JK)*(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
  462 CONTINUE
C
C***
  471 CONTINUE
C***
C
C*         4.8     UPDATING OF Z0 FOR OPEN SEA.
C
  480 CONTINUE
C
      DO  481 JL=KIDIA,KFDIA
      PAZ0(JL)=CVMGT(PAZ0M(JL),AMAX1(ZCONS14*ZTCOE(JL)
#ifdef C90
     *        *SQRTHF(ZUDIF(JL,KLEV)**2+ZVDIF(JL,KLEV)**2)
#else
     *        *SQRT(ZUDIF(JL,KLEV)**2+ZVDIF(JL,KLEV)**2)
#endif
     *        *PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)-PXM1(JL,KLEV))
     *        /PAPHM1(JL,KLEVP1),ZEPZZO),LALAND(JL))
#ifdef ECH4_ICE
      PAZ0(JL) = CVMGT (PAZ0(JL)
     *                , PAZ0(JL) + PSEAICE(JL)*( CZ0ICE - PAZ0(JL) )
     *                , LALAND(JL)
     *                 )
#else
      LO=(.NOT.LALAND(JL)).AND.(PSEAICE(JL).GT.0.5)
      PAZ0(JL)=CVMGT(CZ0ICE,PAZ0(JL),LO)
#endif
      ZTAUX=ZCONS15*ZTCOE(JL)*ZUDIF(JL,KLEV)
      ZTAUY=ZCONS15*ZTCOE(JL)*ZVDIF(JL,KLEV)
      PUSTR(JL)=PUSTRM(JL)+ZDIAGT*ZTAUX
      PVSTR(JL)=PVSTRM(JL)+ZDIAGT*ZTAUY
#ifdef C90
      ZTAU=SQRTHF(ZTAUX**2+ZTAUY**2)
CEVM  PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRTHF(ZTAU/ZRHOS)**3
      ZRHOL=PAPHM1(JL,KLEVP1)/(ZRD*PTM1(JL,KLEV)
     *                        *(1.+VTMPC1*PQM1(JL,KLEV)))
      PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRTHF(ZTAU/ZRHOL)**3
#else
      ZTAU=SQRT(ZTAUX**2+ZTAUY**2)
CEVM  PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRT(ZTAU/ZRHOS)**3
      ZRHOL=PAPHM1(JL,KLEVP1)/(ZRD*PTM1(JL,KLEV)
     *                        *(1.+VTMPC1*PQM1(JL,KLEV)))
      PUSTAR3(JL)=PUSTAR3M(JL)+ZDIAGT*SQRT(ZTAU/ZRHOL)**3
#endif
      PVDIS(JL)=PVDISM(JL)+ZDIAGT*ZCONS15*ZVIDIS(JL)
  481 CONTINUE
CJHC
C     ZBUD=BUDW(IROW)
C     DVDISZ(IROW)=ZDIAGT*ZCONS15*ZBUD*SSUM(KLON,ZVIDIS,1)
CJHC
C
C     ------------------------------------------------------------------
C
C*         5.     DIFFUSION IMPLICIT COMPUTATIONS FOR HEAT (S.+L.).
C                 --------- -------- ------------ --- ---- --------
C
  500 CONTINUE
      DO 502 JK=1,KLEV
      DO 501 JL=KIDIA,KFDIA
      ZTDIF(JL,JK)=0.
      ZQDIF(JL,JK)=0.
      ZXDIF(JL,JK)=0.
  501 CONTINUE
  502 CONTINUE
C
CJHC  DO 505 JT=1,NTRAC
C     DO 504 JK=1,KLEV
C     DO 503 JL=KIDIA,KFDIA
C     ZXTDIF(JL,JK,JT)=0.
C 503 CONTINUE
C 504 CONTINUE
C 505 CONTINUE
C
C*         5.1     SETTING OF RIGHT HAND SIDES.
C
  510 CONTINUE
      DO 512 JK=ITOP,KLEV
      DO 511 JL=KIDIA,KFDIA
      ZTDIF(JL,JK)=ZTPFAC2*ZCPTGZ(JL,JK)
      ZQDIF(JL,JK)=ZTPFAC2*PQM1(JL,JK)
      ZXDIF(JL,JK)=ZTPFAC2*PXM1(JL,JK)
  511 CONTINUE
  512 CONTINUE
C
CJHC  DO 518 JT=1,NTRAC
C     DO 516 JK=ITOP,KLEV
C     DO 514 JL=KIDIA,KFDIA
C     ZXTDIF(JL,JK,JT)=ZTPFAC2*PXTM1(JL,JK,JT)
C 514 CONTINUE
C 516 CONTINUE
C 518 CONTINUE
C
C*         5.2     TOP LAYER ELIMINATION.
C
  520 CONTINUE
C
      DO 521 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,ITOPP1)-PAPHM1(JL,ITOP))
      ZDISC=1./(1.+ZCFH(JL,ITOP)*ZQDP)
      ZEBSH(JL,ITOP)=ZDISC*(ZCFH(JL,ITOP)*ZQDP)
      ZTDIF(JL,ITOP)=ZDISC*ZTDIF(JL,ITOP)
      ZQDIF(JL,ITOP)=ZDISC*ZQDIF(JL,ITOP)
      ZXDIF(JL,ITOP)=ZDISC*ZXDIF(JL,ITOP)
  521 CONTINUE
C
CJHC  DO 528 JT=1,NTRAC
C     DO 526 JL=KIDIA,KFDIA
C      ZQDP=1./(PAPHM1(JL,ITOPP1)-PAPHM1(JL,ITOP))
C      ZDISC=1./(1.+ZCFH(JL,ITOP)*ZQDP)
C      ZXTDIF(JL,ITOP,JT)=ZDISC*ZXTDIF(JL,ITOP,JT)
C 526 CONTINUE
C 528 CONTINUE
C
C*         5.3     ELIMINATION FOR MIDDLE LAYERS.
C
  530 CONTINUE
C
      DO 532 JK=ITOPP1,KLEVM1
      DO 531 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
      ZFAC=ZCFH(JL,JK-1)*ZQDP
      ZDISC=1./(1.+ZFAC*(1.-ZEBSH(JL,JK-1))+ZCFH(JL,JK)*ZQDP)
      ZEBSH(JL,JK)=ZDISC*(ZCFH(JL,JK)*ZQDP)
      ZTDIF(JL,JK)=ZDISC*(ZTDIF(JL,JK)+ZFAC*ZTDIF(JL,JK-1))
      ZQDIF(JL,JK)=ZDISC*(ZQDIF(JL,JK)+ZFAC*ZQDIF(JL,JK-1))
      ZXDIF(JL,JK)=ZDISC*(ZXDIF(JL,JK)+ZFAC*ZXDIF(JL,JK-1))
  531 CONTINUE
  532 CONTINUE
C
CJHC  DO 538 JT=1,NTRAC
C     DO 536 JK=ITOPP1,KLEVM1
C     DO 534 JL=KIDIA,KFDIA
C     ZQDP=1./(PAPHM1(JL,JK+1)-PAPHM1(JL,JK))
C     ZFAC=ZCFH(JL,JK-1)*ZQDP
C     ZDISC=1./(1.+ZFAC*(1.-ZEBSH(JL,JK-1))+ZCFH(JL,JK)*ZQDP)
C     ZXTDIF(JL,JK,JT)=ZDISC*(ZXTDIF(JL,JK,JT)+
C    *                     ZFAC*ZXTDIF(JL,JK-1,JT))
C 534 CONTINUE
C 536 CONTINUE
C 538 CONTINUE
C
C*         5.4     BOTTOM LAYER ELIMINATION.
C
  540 CONTINUE
C
      DO 541 JL=KIDIA,KFDIA
      ZQDP=1./(PAPHM1(JL,KLEVP1)-PAPHM1(JL,KLEV))
      ZFAC=ZCFH(JL,KLEVM1)*ZQDP
      ZTCOE(JL)=ZCFH(JL,KLEV)
      ZDISC=1./(1.+ZFAC*(1.-ZEBSH(JL,KLEVM1))+ZCFH(JL,KLEV)*ZQDP)
      ZDISQ=1./(1.+ZFAC*(1.-ZEBSH(JL,KLEVM1))+ZCAIR(JL)*ZCFH(JL,KLEV)
     *      *ZQDP)
      ZTDIF(JL,KLEV)=ZDISC*(ZTDIF(JL,KLEV)+(ZCFH(JL,KLEV)*ZQDP)
     *               *ZTPFAC2*ZCPTS(JL)+ZFAC*ZTDIF(JL,KLEVM1))
      ZQDIF(JL,KLEV)=ZDISQ*(ZQDIF(JL,KLEV)+(ZCSAT(JL)*ZCFH(JL,KLEV)*
     *               ZQDP)*ZTPFAC2*ZQS(JL)+ZFAC*ZQDIF(JL,KLEVM1))
      ZXDIF(JL,KLEV)=ZDISC*(ZXDIF(JL,KLEV)+ZFAC*ZXDIF(JL,KLEVM1))
  541 CONTINUE
C
CJHC  DO 544 JT=1,NTRAC
C     DO 543 JL=KIDIA,KFDIA
C     ZQDP=1./(PAPHM1(JL,KLEVP1)-PAPHM1(JL,KLEV))
C     ZFAC=ZCFH(JL,KLEVM1)*ZQDP
C     ZDISXT=1./(1.+ZFAC*(1.-ZEBSH(JL,KLEVM1)))
C     ZXTDIF(JL,KLEV,JT)=ZDISXT*(ZXTDIF(JL,KLEV,JT)+
C    *                       ZTMST*G*ZQDP*ZXTEMS(JL,JT)*ZTPFAC2
C    *                      +ZFAC*ZXTDIF(JL,KLEVM1,JT))
C 543 CONTINUE
C 544 CONTINUE
C
C*         5.5     BACK-SUBSTITUTION.
C
  550 CONTINUE
C
      DO 552 JK=KLEVM1,ITOP,-1
      DO 551 JL=KIDIA,KFDIA
      ZTDIF(JL,JK)=ZTDIF(JL,JK)+ZEBSH(JL,JK)*ZTDIF(JL,JK+1)
      ZQDIF(JL,JK)=ZQDIF(JL,JK)+ZEBSH(JL,JK)*ZQDIF(JL,JK+1)
      ZXDIF(JL,JK)=ZXDIF(JL,JK)+ZEBSH(JL,JK)*ZXDIF(JL,JK+1)
  551 CONTINUE
  552 CONTINUE
C
CJCH  DO 558 JT=1,NTRAC
C     DO 556 JK=KLEVM1,ITOP,-1
C     DO 554 JL=KIDIA,KFDIA
C      ZXTDIF(JL,JK,JT)=ZXTDIF(JL,JK,JT)+ZEBSH(JL,JK)
C    *                    *ZXTDIF(JL,JK+1,JT)
C 554 CONTINUE
C 556 CONTINUE
C 558 CONTINUE
C*         5.6     INCREMENTATION OF T AND Q TENDENCIES.
C
  560 CONTINUE
C
C***
      DO 571 JK=ITOP,KLEV
C***
      DO 561 JL=KIDIA,KFDIA
      ZQDIF(JL,JK)=ZQDIF(JL,JK)+ZTPFAC3*PQM1(JL,JK)
      ZDQDT=(ZQDIF(JL,JK)-PQM1(JL,JK))*ZCONS13
      PQTE(JL,JK)=PQTE(JL,JK)+ZDQDT
      ZTDIF(JL,JK)=ZTDIF(JL,JK)+ZTPFAC3*ZCPTGZ(JL,JK)
      ZDTDT=((ZTDIF(JL,JK)+ZDIS(JL,JK)-PGEOM1(JL,JK))
     *   /(CPD*(1.+VTMPC2*ZQDIF(JL,JK)))-PTM1(JL,JK))*ZCONS13
      PTTE(JL,JK)=PTTE(JL,JK)+ZDTDT
      ZXDIF(JL,JK)=ZXDIF(JL,JK)+ZTPFAC3*PXM1(JL,JK)
      ZDXMDT=(ZXDIF(JL,JK)-PXM1(JL,JK))*ZCONS13
      PXTE(JL,JK)=PXTE(JL,JK)+ZDXMDT
  561 CONTINUE
C
C***
  571 CONTINUE
CJCH  IF (LXTVDIFF) THEN
C       DO 577 JT=1,NTRAC
C       DO 575 JK=ITOP,KLEV
C       DO 573 JL=KIDIA,KFDIA
C       ZXTDIF(JL,JK,JT)=ZXTDIF(JL,JK,JT)+ZTPFAC3*PXTM1(JL,JK,JT)
C       ZDXTDT=(ZXTDIF(JL,JK,JT)-PXTM1(JL,JK,JT))*ZCONS13
C       PXTTE(JL,JK,JT)=PXTTE(JL,JK,JT)+ZDXTDT
C 573   CONTINUE
C 575   CONTINUE
C 577   CONTINUE
C     ENDIF
C
C***
C
C*         5.8     STORAGE OF THE SURFACE HEAT (S.+L.) AND MOISTURE
C*         FLUXES AND THEIR DERIVATIVES
C*         AGAINST SURFACE VARIABLES
C
  580 CONTINUE
C
      DO 581 JL=KIDIA,KFDIA
      ZCOEFF=ZCONS15*ZTCOE(JL)
C
COBC  Multiplied by zqs on both sides:
      LO=(ZQS(JL)*ZHUM(JL)).LE.PQM1(JL,KLEV)
      ZHUM(JL)=CVMGT(0.,ZHUM(JL),LO)
      ZCA=CVMGT(0.,1.,LO)
      ZHUM(JL)=CVMGT(ZHUM(JL),1.,LALAND(JL))
      ZCA=CVMGT(ZCA,1.,LALAND(JL))
      LO=PQM1(JL,KLEV).GT.ZQS(JL)
      ZHUM(JL)=CVMGT(1.,ZHUM(JL),LO)
      ZCA=CVMGT(1.,ZCA,LO)
      ZHUM(JL)=(1.-PCVS(JL))*(1.-PCVW(JL))*ZHUM(JL)
      ZCA=(1.-PCVS(JL))*(1.-PCVW(JL))*ZCA
C
      ZQNLEV=ZQDIF(JL,KLEV)-ZTPFAC3*PQM1(JL,KLEV)
      ZZQS=ZTPFAC2*ZQS(JL)
      PQHFL(JL)=ZCOEFF*(ZCAIR(JL)*ZQNLEV-ZCSAT(JL)*ZZQS)
C
      ZTNLEV=ZTDIF(JL,KLEV)-ZTPFAC3*ZCPTGZ(JL,KLEV)
      ZZCPTS=ZTPFAC2*ZCPTS(JL)
      PTHFL(JL)=ZCOEFF*(ZTNLEV-ZZCPTS)
      PDHFT(JL)=-ZCONS16*PQHFL(JL)
      PTHFL(JL)=PTHFL(JL)+PTSM1M(JL)*PDHFT(JL)
C
      ZXNLEV=ZXDIF(JL,KLEV)-ZTPFAC3*PXM1(JL,KLEV)
      ZXHFL=ZCOEFF*ZXNLEV
      PRSFL(JL)=MAX(0.,ZXHFL)
      PXHFL(JL)=MIN(ZXHFL,0.)
C
      PAHFS(JL)=PAHFSM(JL)+ZDIAGT*PTHFL(JL)
      PEVAP(JL)=PEVAPM(JL)+ZDIAGW*(PQHFL(JL)+PXHFL(JL))
C
      PDHFQW(JL)=ZCOEFF*ZWLMXI(JL)*(1.-PCVS(JL))*(ZQNLEV-ZZQS)
C
      PDHFQS(JL)=ZCOEFF*(ZQNLEV-ZZQS)
C
      ZWET(JL)=ZWET(JL)-PCVS(JL)-(1.-PCVS(JL))*PCVW(JL)
      ZQHFLV=PVGRAT(JL)*ZWET(JL)*(ZQNLEV-ZZQS)
      ZQHFLB=(1.-PVGRAT(JL))*(ZCA*ZQNLEV-ZHUM(JL)*ZZQS)
      PCVGHL(JL)=CVMGT(ABS(ZQHFLV)/AMAX1(ZEPEVAP,ABS(ZQHFLV)+
     *                ABS(ZQHFLB)),1.,LALAND(JL))
  581 CONTINUE
C
CJCH  DHFSZ(IROW) =ZDIAGT*ZBUD*SSUM(KLON,PTHFL,1)
CJCH  DEVAPZ(IROW)=ZDIAGW*ZBUD*SSUM(KLON,PQHFL,1)
C
      DO 582 JL=KIDIA,KFDIA
      PQHFL(JL)=PQHFL(JL)-PCVS(JL)*PDHFQS(JL)
#ifdef ECH4_ICE
      PAHFL(JL) = ( 1.0 - PSEAICE(JL) )
     *           *( ALV*PQHFL(JL) + ALS*PCVS(JL)*PDHFQS(JL) )
     *          + PSEAICE(JL)
     *           *ALS*PQHFL(JL)
#else
      PAHFL(JL)=ALV*PQHFL(JL)+ALS*PCVS(JL)*PDHFQS(JL)
#endif
      PTHFL(JL)=PTHFL(JL)+PAHFL(JL)
      PAHFL(JL)=PAHFLM(JL)+ZDIAGT*PAHFL(JL)
      LO=LALAND(JL).OR.PTSM1M(JL).GT.TMELT
      ZALVS=ALS*PCVS(JL)+ALV*(1.-PCVS(JL))
      ZALVS=CVMGT(ZALVS,ALS,LO)
      PDHFT(JL)=-ZTPFAC2*ZCONS15*ZTCOE(JL)*(ZCPTS(JL)/PTSM1M(JL)+
     *         (ZALVS-ZCONS16*PTSM1M(JL))*ZCSAT(JL)*ZDQS(JL))+PDHFT(JL)
  582 CONTINUE
#ifdef EVM
C
C*         5.85     COMPUTATION OF BOUNDARY LAYER HEIGHT
C
      DO 585 JL=KIDIA,KFDIA
      ZDU2=AMAX1(ZEPDU2,PUM1(JL,KLEV)**2+PVM1(JL,KLEV)**2)
      ZRHO=PAPHM1(JL,KLEVP1)/ZRD/
     &      (PTM1(JL,KLEV)*(1.+VTMPC1*PQM1(JL,KLEV)))
      ZSENKF(JL)=-(PAHFS(JL)-PAHFSM(JL))/(ZDIAGT*ZRHO*ZCPD)
#ifdef ECH4_ICE
      ZLATKF(JL) =- ( ( 1.0 - PSEAICE(JL) )
     *           *( ALV*PQHFL(JL) + ALS*PCVS(JL)*PDHFQS(JL) )
     *          + PSEAICE(JL)
     *           *ALS*PQHFL(JL) ) /(ZRHO*ALV)
#else
      ZLATKF(JL)=-(ALV*PQHFL(JL)+ALS*PCVS(JL)*PDHFQS(JL))/(ZRHO*ALV)
#endif
      ZUSTAR1(JL)=((PUSTAR3(JL)-PUSTAR3M(JL))/ZDIAGT)**(1./3.)
      ZCDH(JL)=ZCFH(JL,KLEV)/(ZCONS12*SQRT(ZDU2)*ZRD*ZRHO)
      ZCDM(JL)=ZCFM(JL,KLEV)/(ZCONS12*SQRT(ZDU2)*ZRD*ZRHO)
C
C     EMPTY SOME WORKSPACE
C
      ZPBLH(JL)=0.
      ZOBUKL(JL)=0.
      ZBUOYPR(JL)=0.
  585 CONTINUE
C
      CALL EC_PBLHGHT(NSTEP,KLON,KLEV,KIDIA,KFDIA,
     &             ZTETA1,PQM1,PGEOM1,PUM1,PVM1,ZTESS,
     &             ZSENKF,ZLATKF,ZUSTAR1,
     &             ZCDN,ZCDH,ZCDM,
     &             ZPBLH,ZOBUKL,ZBUOYPR)
C
      DO 587 JL=KIDIA,KFDIA
      PBLH  (JL) = PBLHM  (JL) + ZDIAGT*ZPBLH  (JL)
  587 CONTINUE
#endif
C
C*       5.95  COMPUTE NEW T2MAX AND MIN
C
 595  CONTINUE
C
      DO 597 JL=KIDIA,KFDIA
      LO1=ZRICLS(JL).GE.0.
      ZRAT=ZHTQ/PGEOM1(JL,KLEV)
#ifdef C90
      ZCBN=ALOGHF(1.+(EXPHF(ZBN(JL))-1.)*ZRAT)
#else
      ZCBN=ALOG(1.+(EXP(ZBN(JL))-1.)*ZRAT)
#endif
      ZCBS=-(ZBN(JL)-ZBH(JL))*ZRAT
#ifdef C90
      ZCBU=-ALOGHF(1.+(EXPHF(ZBN(JL)-ZBH(JL))-1.)*ZRAT)
#else
      ZCBU=-ALOG(1.+(EXP(ZBN(JL)-ZBH(JL))-1.)*ZRAT)
#endif
      ZRED=(ZCBN+CVMGT(ZCBS,ZCBU,LO1))/ZBH(JL)
      ZH2M=ZCPTS(JL)+ZRED*(ZCPTGZ(JL,KLEV)-ZCPTS(JL))
      ZT2=(ZH2M-ZHTQ)/(CPD*(1.+VTMPC2*PQM1(JL,KLEV)))
      PTEMP2(JL)=PTEMP2M(JL)+ZDIAGT*ZT2
      PT2MAX(JL)=AMAX1(PT2MAXM(JL),ZT2)
      PT2MIN(JL)=AMIN1(PT2MINM(JL),ZT2)
C
C*          5.96   2M DEW POINT
C
      IT=PTM1(JL,KLEV)*1000.
      ZQS1=TLUCUA(IT)/PAPM1(JL,KLEV)
      ZQS1=ZQS1/(1.-VTMPC1*ZQS1)
      ZRH2M=AMAX1(ZEPHUM,PQM1(JL,KLEV)/ZQS1)
C
      LO=ZT2.GT.TMELT
      ZCVM3=CVMGT(C3LES,C3IES,LO)
      ZCVM4=CVMGT(C4LES,C4IES,LO)
      ZAPH2M=PAPHM1(JL,KLEVP1)*
     *       (1.-ZHTQ/(RD*ZT2*(1.+VTMPC1*PQM1(JL,KLEV))))
      IT=ZT2*1000.
      ZQS2=TLUCUA(IT)/ZAPH2M
      ZQS2=ZQS2/(1.-VTMPC1*ZQS2)
      ZQ2M=ZRH2M*ZQS2
#ifdef C90
      ZFRAC=ALOGHF(ZAPH2M*ZQ2M/(C2ES*(1.+VTMPC1*ZQ2M)))/ZCVM3
#else
      ZFRAC=ALOG(ZAPH2M*ZQ2M/(C2ES*(1.+VTMPC1*ZQ2M)))/ZCVM3
#endif
      PDEW2(JL)=PDEW2M(JL)+ZDIAGT*AMIN1(ZT2,(TMELT-ZFRAC*ZCVM4)
     *                          /(1.-ZFRAC))
C
C*          5.97   10M WIND COMPONENTS, MAX 10M WINDSPEED
C
      ZRAT=ZHUV/PGEOM1(JL,KLEV)
#ifdef C90
      ZCBN=ALOGHF(1.+(EXPHF(ZBN(JL))-1.)*ZRAT)
#else
      ZCBN=ALOG(1.+(EXP(ZBN(JL))-1.)*ZRAT)
#endif
      ZCBS=-(ZBN(JL)-ZBM(JL))*ZRAT
#ifdef C90
      ZCBU=-ALOGHF(1.+(EXPHF(ZBN(JL)-ZBM(JL))-1.)*ZRAT)
#else
      ZCBU=-ALOG(1.+(EXP(ZBN(JL)-ZBM(JL))-1.)*ZRAT)
#endif
      ZRED=(ZCBN+CVMGT(ZCBS,ZCBU,LO1))/ZBM(JL)
      ZU10=ZRED*PUM1(JL,KLEV)
      ZV10=ZRED*PVM1(JL,KLEV)
#ifdef C90
      ZSPEED=SQRTHF(ZU10**2+ZV10**2)
#else
      ZSPEED=SQRT(ZU10**2+ZV10**2)
#endif
      PU10(JL)=PU10M(JL)+ZDIAGT*ZU10
      PV10(JL)=PV10M(JL)+ZDIAGT*ZV10
      PWIMAX(JL)=AMAX1(PWIMAXM(JL),ZSPEED)
      PWIND10(JL)=PWIND10M(JL)+ZDIAGT*ZSPEED
  597 CONTINUE
C
C     ------------------------------------------------------------------
C
C*         6.     NECESSARY COMPUTATIONS IF SUBROUTINE IS BY-PASSED.
C                 --------- ------------ -- ---------- -- ----------
C
  600 CONTINUE
C***
      ELSE
C***
      DO  601 JL=KIDIA,KFDIA
      PAZ0(JL)=PAZ0M(JL)
      PCVGHL(JL)=0.
      PVDIS(JL)=PVDISM(JL)
      PUSTR(JL)=PUSTRM(JL)
      PVSTR(JL)=PVSTRM(JL)
      PAHFS(JL)=PAHFSM(JL)
      PAHFL(JL)=PAHFLM(JL)
      PEVAP(JL)=PEVAPM(JL)
      PTHFL(JL)=0.
      PDHFT(JL)=0.
      PQHFL(JL)=0.
      PXHFL(JL)=0.
      PDHFQW(JL)=0.
      PDHFQS(JL)=0.
      PRSFL(JL)=0.
      PTEMP2(JL)=PTEMP2M(JL)
      PT2MAX(JL)=PT2MAXM(JL)
      PT2MIN(JL)=PT2MINM(JL)
      PDEW2(JL)=PDEW2M(JL)
      PU10(JL)=PU10M(JL)
      PV10(JL)=PV10M(JL)
      PWIND10(JL)=PWIND10M(JL)
      PUSTAR3(JL)=PUSTAR3M(JL)
      PWIMAX(JL)=PWIMAXM(JL)
  601 CONTINUE
C     DVDISZ(IROW)=0.
C     DHFSZ(IROW)=0.
C     DEVAPZ(IROW)=0.
      END IF
C***
C
C     ------------------------------------------------------------------
C
      RETURN
      END
